options:
  parameters:
    author: "Christer Bern\xE9rus, SM6FBQ"
    catch_exceptions: 'True'
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: This design is free to use under GPL2
    description: VHF-UHF transceiver with CW and SSB
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: FBQ_xcvr
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: /Users/bernerus/priv/proj/sdr/grc/FBQ_xcvr.qss
    realtime_scheduling: '1'
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: SM6FBQ VHF transceiver
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 156.0]
    rotation: 0
    state: enabled

blocks:
- name: RX_power_offset_dB
  id: variable
  parameters:
    comment: ''
    value: '-104'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 148.0]
    rotation: 0
    state: enabled
- name: af_mix_matrices
  id: variable
  parameters:
    comment: ''
    value: '[((1,0,0,0,0),(1,0,0,0,0)),  ((1,0,0,0,0),(1,0,0,0,0)),  ((0,1,0,0,0),(0,1,0,0,0)),  ((1,0,0,0,0),(1,0,0,0,0)),  ((1,0,0,0,0),(0,1,0,0,0)),  ((0,0,1,0,0),(0,0,0,1,0)),  ((0,0,0,0,1),(0,0,0,0,1))]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2448, 2008.0]
    rotation: 0
    state: true
- name: af_right
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: settings_tab@0:10, 1, 1, 2
    label: AF BAL
    min_len: '100'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.01'
    stop: '1'
    value: '0.5'
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 1228.0]
    rotation: 0
    state: enabled
- name: agc_attack
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: settings_tab@3:12, 1, 1, 2
    label: AGC attack
    min_len: '100'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.0'
    step: '0.01'
    stop: '3'
    value: '0.01'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1760, 1236.0]
    rotation: 0
    state: enabled
- name: agc_decay
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: settings_tab@3:13, 1, 1, 2
    label: AGC decay
    min_len: '100'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: 3e-7
    stop: 50e-7
    value: 8e-7
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1848, 1236.0]
    rotation: 0
    state: enabled
- name: audio_samp_rate
  id: variable
  parameters:
    comment: ''
    value: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 292.0]
    rotation: 0
    state: enabled
- name: band_selector
  id: variable_qtgui_chooser
  parameters:
    comment: Selects the frequency band to use
    gui_hint: 1,3,1,2
    label: BAND
    label0: ''
    label1: ''
    label2: ''
    label3: ''
    label4: ''
    labels: ham_bands_keys
    num_opts: '0'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: ham_bands_keys
    orient: Qt.QHBoxLayout
    type: string
    value: '''                  '''
    widget: combo_box
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1600, 292.0]
    rotation: 0
    state: true
- name: bpf_high
  id: variable
  parameters:
    comment: ''
    value: 5000,4000,3300,2800,1530,1130,1080, 905
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 20.0]
    rotation: 0
    state: enabled
- name: bpf_low
  id: variable
  parameters:
    comment: ''
    value: 100, 100,100,100,230,630,780, 855
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 20.0]
    rotation: 0
    state: enabled
- name: channel_separation
  id: variable
  parameters:
    comment: ''
    value: '[100,100,10,10,1000,1000]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 228.0]
    rotation: 0
    state: true
- name: cq_flavor
  id: variable_qtgui_entry
  parameters:
    comment: ''
    gui_hint: op_tab@2:1,0,1,1
    label: CQ Flavor
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 3676.0]
    rotation: 0
    state: true
- name: current_allowed_modes
  id: variable_qtgui_entry
  parameters:
    comment: Displays a list od the allowed transmission modes in the selected band
    gui_hint: settings_tab@2:0,5,1,1
    label: Modes
    type: raw
    value: ham_bands[band_selector][4]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 972.0]
    rotation: 0
    state: true
- name: current_allowed_tx_bandwidth
  id: variable_qtgui_entry
  parameters:
    comment: Displays the allowed transmitter bandwidth of the selected band
    gui_hint: settings_tab@2:0,4,1,1
    label: Bw
    type: real
    value: ham_bands[band_selector][3]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 892.0]
    rotation: 0
    state: true
- name: current_default_fq
  id: variable_qtgui_entry
  parameters:
    comment: Displays the default frequency of the selected band
    gui_hint: settings_tab@2:0,2,1,1
    label: Def-fq
    type: real
    value: ham_bands[band_selector][2]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 812.0]
    rotation: 0
    state: true
- name: current_max_fq
  id: variable_qtgui_entry
  parameters:
    comment: Displays the highest frequency of the selected band
    gui_hint: settings_tab@2:0,1,1,1
    label: Max-fq
    type: real
    value: ham_bands[band_selector][1]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 732.0]
    rotation: 0
    state: true
- name: current_min_fq
  id: variable_qtgui_entry
  parameters:
    comment: Displays the lowest frequency of the selected band
    gui_hint: settings_tab@2:0,0,1,1
    label: Min-fq
    type: real
    value: ham_bands[band_selector][0]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 652.0]
    rotation: 0
    state: true
- name: current_op_tab
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx filter frequency
    gui_hint: settings_tab@2:5,1,1,1
    label: Op tab
    type: string
    value: op_tab.currentIndex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1120, 932.0]
    rotation: 0
    state: enabled
- name: cw_level
  id: variable_qtgui_dial_control
  parameters:
    comment: ''
    gui_hint: op_tab@2:0,0,1,1
    label: CW TX LEVEL
    maximum: '95'
    minimum: '0'
    minsize: '50'
    outputmsgname: value
    relBackgroundColor: lime
    scaleFactor: '0.01'
    showvalue: 'True'
    type: real
    value: '0.8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1168, 3516.0]
    rotation: 0
    state: true
- name: cw_midear_beat
  id: variable
  parameters:
    comment: ''
    value: 0,0,0,880,880,0,0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 228.0]
    rotation: 0
    state: true
- name: cw_samp_rate
  id: variable
  parameters:
    comment: ''
    value: 50e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 2896.0]
    rotation: 0
    state: enabled
- name: cw_txing
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 228.0]
    rotation: 0
    state: enabled
- name: debug_desired_fft_bw
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx frequency of the hackrf
    gui_hint: settings_tab@2:4,0,1,1
    label: Desired fft bndwidth
    type: real
    value: fft_bw_desired
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 940.0]
    rotation: 0
    state: enabled
- name: debug_fft_decim
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx frequency of the hackrf
    gui_hint: settings_tab@2:5,0,1,1
    label: FFT decimation value
    type: real
    value: fft_decim
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 1028.0]
    rotation: 0
    state: enabled
- name: debug_side_band_rx
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx frequency of the hackrf
    gui_hint: settings_tab@2:5,2,1,1
    label: Side_band_rx
    type: real
    value: side_band_rx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 1108.0]
    rotation: 0
    state: enabled
- name: dx_call
  id: variable_qtgui_entry
  parameters:
    comment: ''
    gui_hint: op_tab@2:3,0,1,1
    label: DX call
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 3428.0]
    rotation: 0
    state: true
- name: f0
  id: variable
  parameters:
    comment: ''
    value: current_min_fq + (current_max_fq - current_min_fq)/2.0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 84.0]
    rotation: 0
    state: true
- name: f0_min
  id: variable
  parameters:
    comment: ''
    value: ham_bands[band_selector][0]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 84.0]
    rotation: 0
    state: true
- name: fft_bw_desired
  id: variable
  parameters:
    comment: ''
    value: min(if0_samp_rate, abs(current_max_fq-current_min_fq))
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 1656.0]
    rotation: 0
    state: enabled
- name: fft_center_fq
  id: variable
  parameters:
    comment: ''
    value: rx_hw_fq + filter_fq + fft_corr[side_band_rx]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 1688.0]
    rotation: 0
    state: true
- name: fft_corr
  id: variable
  parameters:
    comment: ''
    value: 0,0,0,880,0,0,0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 84.0]
    rotation: 0
    state: enabled
- name: fft_decim
  id: variable
  parameters:
    comment: ''
    value: rx_samp_rate/fft_bw_desired
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 1656.0]
    rotation: 0
    state: enabled
- name: filter_fq
  id: variable
  parameters:
    comment: Demodulator offset of hardware receiver.
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2224, 296.0]
    rotation: 0
    state: true
- name: fm_gain
  id: variable
  parameters:
    comment: ''
    value: '0.8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2184, 1888.0]
    rotation: 0
    state: true
- name: fq_calibration
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: settings_tab@0:11, 1, 1, 2
    label: FQ CAL
    min_len: '100'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-50'
    step: '1'
    stop: '50'
    value: '26'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1408, 1228.0]
    rotation: 0
    state: enabled
- name: freq
  id: variable
  parameters:
    comment: From the waterfall. Bad name but hard to change it seems-
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 660.0]
    rotation: 0
    state: true
- name: ham_bands
  id: variable
  parameters:
    comment: "Dummy variable to satisfy GRC checks. The band_plan code snippet will\
      \ \nreplace its value on startup."
    value: '{''                  '':(30e6,6e9,0,0,[''CW''])}'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 836.0]
    rotation: 0
    state: true
- name: ham_bands_keys
  id: variable
  parameters:
    comment: "Dummy variable to satisfy GRC checks. The band_plan code snippet will\
      \ \nreplace its value on startup."
    value: '[''                  '']'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 756.0]
    rotation: 0
    state: true
- name: if0_samp_rate
  id: variable
  parameters:
    comment: ''
    value: rx_samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 1344.0]
    rotation: 0
    state: true
- name: if2_samp_rate
  id: variable
  parameters:
    comment: ''
    value: '50000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 1344.0]
    rotation: 0
    state: true
- name: if_samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1000e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 1344.0]
    rotation: 0
    state: true
- name: lna_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: settings_tab@0:5, 1, 1, 1
    label: RX LNA GAIN
    min_len: '100'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '39'
    value: '39'
    widget: dial
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 924.0]
    rotation: 0
    state: enabled
- name: lsb_chain_gain
  id: variable
  parameters:
    comment: ''
    value: 0,0,1,0,1,0,0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 88.0]
    rotation: 0
    state: enabled
- name: mgm_inpt_gain
  id: variable_qtgui_entry
  parameters:
    comment: Displays thecurrent MGM imput gain
    gui_hint: settings_tab@2:3,0,1,1
    label: MGM input gain
    type: real
    value: mgm_input_gain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 1244.0]
    rotation: 0
    state: true
- name: mgm_input_gain
  id: variable_qtgui_dial_control
  parameters:
    comment: ''
    gui_hint: op_tab@1:0,0,1,1
    label: MGM INPUT GAIN
    maximum: '1995'
    minimum: '0'
    minsize: '50'
    outputmsgname: value
    relBackgroundColor: silver
    scaleFactor: '0.001'
    showvalue: 'True'
    type: real
    value: '1.4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2392, 676.0]
    rotation: 0
    state: true
- name: mgm_output_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: op_tab@1:0, 1, 1, 1
    label: ' MGM VOL'
    min_len: '50'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.1'
    stop: '20'
    value: '2'
    widget: dial
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1768, 1132.0]
    rotation: 0
    state: enabled
- name: mic_gain
  id: variable_qtgui_dial_control
  parameters:
    comment: ''
    gui_hint: op_tab@0:3,6,1,1
    label: MIC GAIN
    maximum: '995'
    minimum: '0'
    minsize: '50'
    outputmsgname: value
    relBackgroundColor: silver
    scaleFactor: '0.001'
    showvalue: 'True'
    type: real
    value: '0.2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2256, 620.0]
    rotation: 0
    state: true
- name: mic_inpt_gain_0
  id: variable_qtgui_entry
  parameters:
    comment: Displays thecurrent MGM imput gain
    gui_hint: settings_tab@2:3,1,1,1
    label: MIC gain
    type: real
    value: mic_gain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 1252.0]
    rotation: 0
    state: true
- name: mode
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: 3, 3, 1, 1
    label: TX MODE
    label0: USB
    label1: LSB
    label2: CW
    label3: CW Stereo
    label4: FT8
    labels: mode_labels_keys
    num_opts: '0'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: mode_labels_values
    orient: Qt.QVBoxLayout
    type: int
    value: mode_default_option
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1728, 708.0]
    rotation: 0
    state: enabled
- name: mode_default_option
  id: variable
  parameters:
    comment: ''
    value: mode_labels[(list(set(mode_labels) & set(current_allowed_modes))[0])]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1728, 800.0]
    rotation: 0
    state: true
- name: mode_display
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx frequency of the hackrf
    gui_hint: settings_tab@2:2,1,1,1
    label: Mode
    type: int
    value: mode
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 1140.0]
    rotation: 0
    state: true
- name: mode_labels
  id: variable
  parameters:
    comment: ''
    value: '{''None'':0 , ''USB'':1, ''LSB'':2, ''CW'': 3, ''CW Stereo'':4, ''MGM'':5,
      ''WBFM'':6,''NBFM'':7}'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 280.0]
    rotation: 0
    state: true
- name: mode_labels_keys
  id: variable
  parameters:
    comment: ''
    value: list(mode_labels.keys())
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 440.0]
    rotation: 0
    state: true
- name: mode_labels_values
  id: variable
  parameters:
    comment: ''
    value: list(mode_labels.values())
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 336.0]
    rotation: 0
    state: true
- name: mode_options
  id: variable
  parameters:
    comment: ''
    value: '[0, 1, 2, 3, 4, 5,6]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 392.0]
    rotation: 0
    state: true
- name: mode_to_audio_input
  id: variable
  parameters:
    comment: ''
    value: '[0,2,2,0,0,1,0,2]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 2360.0]
    rotation: 0
    state: true
- name: mode_to_sb_rx
  id: variable
  parameters:
    comment: ''
    value: '[3,1,2,3,4,1,5,6]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 224.0]
    rotation: 0
    state: true
- name: mode_to_sb_tx
  id: variable
  parameters:
    comment: ''
    value: '[0,1,1,3,3,1,0,2]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 168.0]
    rotation: 0
    state: true
- name: monitor
  id: variable_qtgui_dial_control
  parameters:
    comment: ''
    gui_hint: op_tab@2:0,2,1,1
    label: CW feedback
    maximum: '100'
    minimum: '0'
    minsize: '100'
    outputmsgname: value
    relBackgroundColor: teal
    scaleFactor: '1'
    showvalue: 'True'
    type: real
    value: '25'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 3636.0]
    rotation: 0
    state: true
- name: morse_speed
  id: variable_qtgui_dial_control
  parameters:
    comment: Morse speed in characters per minute, not WPM
    gui_hint: op_tab@2:0,1,1,1
    label: MORSE SPEED [CPM]
    maximum: '200'
    minimum: '40'
    minsize: '50'
    outputmsgname: value
    relBackgroundColor: navy
    scaleFactor: '1'
    showvalue: 'True'
    type: real
    value: '120'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 3636.0]
    rotation: 0
    state: true
- name: nbfm_chain_gain
  id: variable
  parameters:
    comment: ''
    value: 0,0,0,0,0,0,1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 456.0]
    rotation: 0
    state: enabled
- name: qtgui_levelgauge_0
  id: qtgui_levelgauge
  parameters:
    affinity: ''
    alias: ''
    backgroundColor: silver
    barColor: orange
    comment: ''
    fontColor: teal
    gui_hint: 3,0,1,2
    isVertical: 'False'
    label: S-meter [dBm]
    maximum: '30'
    minimum: '-140'
    msize: '50'
    position: '1'
    scaleFactor: '1'
    showValue: 'True'
    type: real
    value: variable_function_probe_0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1408, 928.0]
    rotation: 0
    state: true
- name: rf_mix_matrices
  id: variable
  parameters:
    comment: ''
    value: '[((0,0,0),),  ((1,0,0),),  ((0,1,0),),  ((0,0,1),)]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1904, 3144.0]
    rotation: 0
    state: true
- name: rx_bw
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: 3, 2, 1, 1
    label: RX BW - kHz
    label0: '3.9'
    label1: '3.2'
    label2: '2.7'
    label3: '0.5'
    label4: '0.05'
    labels: '[''5'',''3.9'',''3.2'',''2.7'',''1.3'',''0.5'',''0.2'',''0.05'']'
    num_opts: '0'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2, 3, 4, 5, 6,7]'
    orient: Qt.QVBoxLayout
    type: int
    value: '2'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 620.0]
    rotation: 0
    state: enabled
- name: rx_center_fq
  id: variable
  parameters:
    comment: ''
    value: f0-100e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 148.0]
    rotation: 0
    state: true
- name: rx_ctr_fq
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx frequency of the hackrf
    gui_hint: settings_tab@2:1,0,1,1
    label: Rx center fq
    type: int
    value: int(rx_hw_fq)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 1052.0]
    rotation: 0
    state: true
- name: rx_ctr_fq_0
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx filter frequency
    gui_hint: settings_tab@2:1,1,1,1
    label: Rx filter fq
    type: int
    value: int(filter_fq)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 1052.0]
    rotation: 0
    state: true
- name: rx_fq
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1872, 452.0]
    rotation: 0
    state: true
- name: rx_fq_win
  id: qtgui_msgdigitalnumbercontrol
  parameters:
    ThousandsSeparator: .
    affinity: ''
    alias: ''
    comment: Receiver zero beat frequency
    gui_hint: 2,2,1,1
    lbl: RX FQ
    maxFreqHz: current_max_fq
    maxoutbuf: '0'
    minFreqHz: current_min_fq - 29e6
    minoutbuf: '0'
    outputmsgname: freq
    readOnly: 'False'
    relBackgroundColor: black
    relFontColor: green
    value: current_default_fq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 504.0]
    rotation: 0
    state: true
- name: rx_hw_fq
  id: variable
  parameters:
    comment: Center frequency of hardware receiver
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2224, 364.0]
    rotation: 0
    state: true
- name: rx_preamp
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: settings_tab@0:4,1,1,1
    label: RX Preamp
    label0: 'OFF'
    label1: 'ON'
    label2: ''
    label3: ''
    label4: ''
    labels: '[''Barefoot'',''PA'']'
    num_opts: '2'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QVBoxLayout
    type: int
    value: '0'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 804.0]
    rotation: 0
    state: enabled
- name: rx_samp_rate
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    label0: 1 MHz
    label1: 2MHz
    label2: 3Mhz
    label3: 4MHz
    label4: 5MHz
    labels: '[''1 MHz'',''2 MHz'',''3 MHz'',''4 MHz'',''5 MHz'',''6 MHz'',''7 MHz'',''8
      MHz'']'
    num_opts: '0'
    option0: '1000000'
    option1: '2000000'
    option2: '3000000'
    option3: '4000000'
    option4: '5000000'
    options: '[1000000, 2000000,3000000,4000000,5000000,6000000,7000000,8000000]'
    orient: Qt.QHBoxLayout
    type: int
    value: '4000000'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 372.0]
    rotation: 0
    state: true
- name: sb_r
  id: variable
  parameters:
    comment: ''
    value: '[-1,1,1,-1]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 252.0]
    rotation: 0
    state: enabled
- name: sb_t
  id: variable
  parameters:
    comment: ''
    value: '[1,-1,1,1]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 252.0]
    rotation: 0
    state: enabled
- name: side_band_dislay
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx frequency of the hackrf
    gui_hint: settings_tab@2:2,2,1,1
    label: Side-band
    type: int
    value: side_band_rx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 1140.0]
    rotation: 0
    state: true
- name: side_band_rx
  id: variable
  parameters:
    comment: ''
    value: mode_to_sb_rx[mode]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 168.0]
    rotation: 0
    state: true
- name: side_band_tx
  id: variable
  parameters:
    comment: ''
    value: mode_to_sb_tx[mode]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 168.0]
    rotation: 0
    state: true
- name: spkr_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 1, 0, 1, 1
    label: '  AF VOL'
    min_len: '50'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '200'
    value: '50'
    widget: dial
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1624, 1132.0]
    rotation: 0
    state: enabled
- name: split_fq
  id: variable_qtgui_check_box
  parameters:
    comment: Checkbox to enable split frequencies
    'false': 'True'
    gui_hint: 2,3,1,1
    label: Split freq
    'true': 'False'
    type: bool
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1760, 608.0]
    rotation: 0
    state: true
- name: sq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 2,0,1,1
    label: SQUELCH
    min_len: '50'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-110'
    step: '1'
    stop: '0'
    value: '-110'
    widget: dial
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1408, 804.0]
    rotation: 0
    state: enabled
- name: ssb_tx_bandwidth
  id: variable
  parameters:
    comment: ''
    value: tx_bw[tx_bw_opts]
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 252.0]
    rotation: 0
    state: true
- name: ssb_txing
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [816, 2288.0]
    rotation: 0
    state: true
- name: ssb_txing_btn
  id: variable_qtgui_push_button
  parameters:
    comment: ''
    gui_hint: 2,5,1,1
    label: PTT
    pressed: '1'
    released: '0'
    type: int
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2368, 528.0]
    rotation: 0
    state: true
- name: symbol_rate
  id: variable
  parameters:
    comment: ''
    value: '20'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 2896.0]
    rotation: 0
    state: enabled
- name: tc_vga
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx frequency of the hackrf
    gui_hint: settings_tab@2:2,3,1,1
    label: TX VGA
    type: real
    value: tx_gain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1384, 1140.0]
    rotation: 0
    state: true
- name: tx_bw
  id: variable
  parameters:
    comment: ''
    value: '[5000.0,3500.0,2500.0,1750.0,500.0]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 436.0]
    rotation: 0
    state: true
- name: tx_bw_opts
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: 3, 4, 1, 1
    label: TX BW - kHz
    label0: '5'
    label1: '3.5'
    label2: '2.5'
    label3: '1.75'
    label4: '0.5'
    labels: '[''3.9'',''2.7'',''0.5'',''0.2'']'
    num_opts: '5'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QVBoxLayout
    type: int
    value: '1'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1944, 624.0]
    rotation: 0
    state: enabled
- name: tx_center_fq
  id: variable
  parameters:
    comment: ''
    value: current_default_fq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 316.0]
    rotation: 0
    state: true
- name: tx_fq
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2280, 528.0]
    rotation: 0
    state: true
- name: tx_fq_q
  id: variable_qtgui_entry
  parameters:
    comment: Displays the rx frequency of the hackrf
    gui_hint: settings_tab@2:2,0,1,1
    label: TX fq
    type: int
    value: int(tx_fq)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 1148.0]
    rotation: 0
    state: true
- name: tx_fq_win
  id: qtgui_msgdigitalnumbercontrol
  parameters:
    ThousandsSeparator: .
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: 2,4,1,1
    lbl: TX FQ
    maxFreqHz: current_max_fq - current_allowed_tx_bandwidth
    maxoutbuf: '0'
    minFreqHz: current_min_fq + current_allowed_tx_bandwidth - 29e6
    minoutbuf: '0'
    outputmsgname: freq
    readOnly: (not split_fq)
    relBackgroundColor: black
    relFontColor: red
    value: tx_center_fq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1960, 512.0]
    rotation: 0
    state: true
- name: tx_gain
  id: variable_qtgui_dial_control
  parameters:
    comment: HackRF transmit gain [dB]
    gui_hint: settings_tab@1:3,5,1,1
    label: TX GAIN
    maximum: '47'
    minimum: '1'
    minsize: '50'
    outputmsgname: value
    relBackgroundColor: orange
    scaleFactor: '1'
    showvalue: 'True'
    type: int
    value: '47'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2144, 620.0]
    rotation: 0
    state: true
- name: tx_mode_offset
  id: variable
  parameters:
    comment: ''
    value: '[0, tx_bw[tx_bw_opts]/2, -tx_bw[tx_bw_opts]/2, 0, 0, tx_bw[tx_bw_opts]/2,tx_bw[tx_bw_opts]/2]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 316.0]
    rotation: 0
    state: true
- name: tx_rprt
  id: variable_qtgui_entry
  parameters:
    comment: ''
    gui_hint: op_tab@2:3,1,1,1
    label: TX report
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 3428.0]
    rotation: 0
    state: true
- name: tx_samp_rate
  id: variable
  parameters:
    comment: ''
    value: '2000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 316.0]
    rotation: 0
    state: enabled
- name: txing
  id: variable
  parameters:
    comment: ''
    value: cw_txing or ssb_txing
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 316.0]
    rotation: 0
    state: enabled
- name: usb_chain_gain
  id: variable
  parameters:
    comment: ''
    value: 1,1,0,1,1,0,0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 372.0]
    rotation: 0
    state: enabled
- name: variable_function_probe_0
  id: variable_function_probe
  parameters:
    block_id: blocks_probe_signal_x_0
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: '20'
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 392.0]
    rotation: 0
    state: enabled
- name: variable_qtgui_entry_0
  id: variable_qtgui_entry
  parameters:
    comment: ''
    gui_hint: ''
    label: Selector
    type: int
    value: side_band_rx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2448, 1692.0]
    rotation: 0
    state: true
- name: vga_gain
  id: variable_qtgui_dial_control
  parameters:
    comment: ''
    gui_hint: settings_tab@0:5,2,1,1
    label: RX VGA Gain
    maximum: '61'
    minimum: '0'
    minsize: '50'
    outputmsgname: value
    relBackgroundColor: teal
    scaleFactor: '1'
    showvalue: 'True'
    type: int
    value: '53'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 1028.0]
    rotation: 0
    state: true
- name: vox_attack
  id: variable
  parameters:
    comment: ''
    value: '[10000,10,10,1,1,1,1,1]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 2664.0]
    rotation: 0
    state: true
- name: vox_delay
  id: variable
  parameters:
    comment: ''
    value: '[0,1.5,1.5,0.7,0.7,0.5,0.5,1.5]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 2608.0]
    rotation: 0
    state: true
- name: vox_sensitivity
  id: variable_qtgui_dial_control
  parameters:
    comment: ''
    gui_hint: op_tab@0:4,6,1,1
    label: VOX SENS
    maximum: '200'
    minimum: '0'
    minsize: '50'
    outputmsgname: value
    relBackgroundColor: teal
    scaleFactor: '1'
    showvalue: 'True'
    type: int
    value: '20'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2256, 748.0]
    rotation: 0
    state: true
- name: vox_threshold
  id: variable
  parameters:
    comment: ''
    value: '[10000,0.6,0.6,0.4,0.4,0.4,10000,0.6]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 2608.0]
    rotation: 0
    state: true
- name: wbfm_chain_gain
  id: variable
  parameters:
    comment: ''
    value: 0,0,0,0,0,1,0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 392.0]
    rotation: 0
    state: enabled
- name: wbfm_chain_gain_0
  id: variable
  parameters:
    comment: ''
    value: 0,0,0,0,0,1,0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 216.0]
    rotation: 0
    state: enabled
- name: wbfm_if2_samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 1344.0]
    rotation: 0
    state: true
- name: wf_fq
  id: variable
  parameters:
    comment: ''
    value: freq+rx_hw_fq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1144, 632.0]
    rotation: 0
    state: true
- name: wf_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 8,2,1,1
    label: Waterfall gain
    min_len: '100'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '100'
    value: '75'
    widget: dial
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1624, 1228.0]
    rotation: 0
    state: true
- name: after_start
  id: snippet
  parameters:
    alias: ''
    code: "self._band_selector_combo_box.removeItem(0)\nfor _label in self._band_selector_labels:\
      \ self._band_selector_combo_box.addItem(_label)\nself._band_selector_callback\
      \ = lambda i: Qt.QMetaObject.invokeMethod(self._band_selector_combo_box, \"\
      setCurrentIndex\", Qt.Q_ARG(\"int\", self._band_selector_options.index(i)))\n\
      self._band_selector_combo_box.currentIndexChanged.connect(\n    lambda i: self.set_band_selector(self._band_selector_options[i])\n\
      )\n\n\nself._band_selector_combo_box.setCurrentIndex(13)\nself.rx_distancer.desired_fq=self.ham_bands['144-FT8'][2]"
    comment: ''
    priority: '1'
    section: main_after_start
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 468.0]
    rotation: 0
    state: true
- name: analog_agc2_xx_0
  id: analog_agc2_xx
  parameters:
    affinity: ''
    alias: ''
    attack_rate: 1e-1
    comment: ''
    decay_rate: 1e-2
    gain: '1.0'
    max_gain: '5'
    maxoutbuf: '0'
    minoutbuf: '0'
    reference: '0.5'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 2568.0]
    rotation: 180
    state: enabled
- name: analog_agc3_xx_0
  id: analog_agc3_xx
  parameters:
    affinity: ''
    alias: ''
    attack_rate: '1'
    comment: ''
    decay_rate: 3e-6
    gain: '.8'
    iir_update_decim: '1'
    max_gain: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    reference: (.001)*0+.002 + 0.8
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1920, 1612.0]
    rotation: 0
    state: enabled
- name: analog_agc3_xx_0_0
  id: analog_agc3_xx
  parameters:
    affinity: ''
    alias: ''
    attack_rate: agc_attack
    comment: ''
    decay_rate: agc_decay
    gain: '0.8'
    iir_update_decim: '1'
    max_gain: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    reference: (.001)*0+.002 + 0.8
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1920, 1508.0]
    rotation: 0
    state: enabled
- name: analog_nbfm_rx_0
  id: analog_nbfm_rx
  parameters:
    affinity: ''
    alias: ''
    audio_rate: int(audio_samp_rate)
    comment: ''
    max_dev: 5e3
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: int(wbfm_if2_samp_rate/int(wbfm_if2_samp_rate/10000)*int(audio_samp_rate/1000))
    tau: 75e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1984, 2040.0]
    rotation: 0
    state: true
- name: analog_nbfm_tx_0
  id: analog_nbfm_tx
  parameters:
    affinity: ''
    alias: ''
    audio_rate: audio_samp_rate
    comment: ''
    fh: '-1.0'
    max_dev: 5e3
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: audio_samp_rate*4
    tau: 75e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 2760.0]
    rotation: 0
    state: true
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: cw_midear_beat[side_band_tx]
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: 50e3
    type: float
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 3228.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: ssb_tx_bandwidth/2
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: audio_samp_rate
    type: float
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 2420.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_1_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: -1 if mode==2 else 1
    comment: ''
    freq: ssb_tx_bandwidth/2
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: audio_samp_rate
    type: float
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 2108.0]
    rotation: 0
    state: enabled
- name: analog_simple_squelch_cc_0
  id: analog_simple_squelch_cc
  parameters:
    affinity: ''
    alias: ''
    alpha: '.001'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: sq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1784, 1632.0]
    rotation: 0
    state: enabled
- name: analog_simple_squelch_cc_0_0
  id: analog_simple_squelch_cc
  parameters:
    affinity: ''
    alias: ''
    alpha: '.001'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: sq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1784, 1528.0]
    rotation: 0
    state: enabled
- name: analog_simple_squelch_cc_0_1
  id: analog_simple_squelch_cc
  parameters:
    affinity: ''
    alias: ''
    alpha: '.001'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: sq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1848, 2048.0]
    rotation: 0
    state: enabled
- name: analog_simple_squelch_cc_0_1_0
  id: analog_simple_squelch_cc
  parameters:
    affinity: ''
    alias: ''
    alpha: '.001'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: sq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1848, 1960.0]
    rotation: 0
    state: enabled
- name: analog_wfm_rcv_pll_0
  id: analog_wfm_rcv_pll
  parameters:
    affinity: ''
    alias: ''
    audio_decimation: '10'
    comment: ''
    deemph_tau: 75e-6
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: wbfm_if2_samp_rate/int(wbfm_if2_samp_rate/10000)*int(audio_samp_rate/1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1984, 1948.0]
    rotation: 0
    state: enabled
- name: audio_sink_0_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: '"std_spkr"'
    num_inputs: '1'
    ok_to_block: 'True'
    samp_rate: audio_samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 3256.0]
    rotation: 0
    state: enabled
- name: audio_sink_0_1
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: '"std_spkr"'
    num_inputs: '2'
    ok_to_block: 'True'
    samp_rate: audio_samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2792, 1772.0]
    rotation: 0
    state: enabled
- name: audio_sink_0_2
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: '"WSJT-3"'
    num_inputs: '2'
    ok_to_block: 'True'
    samp_rate: audio_samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2792, 1900.0]
    rotation: 0
    state: enabled
- name: audio_source_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: MGM audio input. E.g. from WSJT-X
    device_name: '"BlackHole 16ch"'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: audio_samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 2648.0]
    rotation: 0
    state: true
- name: audio_source_0_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: Microphone audio input.
    device_name: '"MacBook Pro-mikrofon"'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: audio_samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 2584.0]
    rotation: 180
    state: true
- name: band_pass_filter_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: "The SSB modulator comprises the first half of a Weaver modulator. \n\
      The audio is mixed in two chains with a carrier that is 90\xB0 out of \nphase\
      \ in the two chains. The carrier frequency is in the middle of the \ntransmitter\
      \ bandwidth. The first filter limits the input audio bandwidth. \nAfter mixing,\
      \ anoter filter limits the resulting signal in each chain to \nhalf of the bandwidth.\
      \ The two chanis are then combined to a complex signal\nand the second half\
      \ of the Weaver modulator is done within the SDR hardware."
    decim: '1'
    gain: '1'
    high_cutoff_freq: '2700'
    interp: '1'
    low_cutoff_freq: '200'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: audio_samp_rate
    type: fir_filter_fff
    width: '100'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 2208.0]
    rotation: 0
    state: enabled
- name: band_pass_filter_0_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: int(if_samp_rate/if2_samp_rate)
    gain: '1'
    high_cutoff_freq: bpf_high[rx_bw]
    interp: '1'
    low_cutoff_freq: bpf_low[rx_bw]
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: if_samp_rate
    type: fir_filter_ccc
    width: '100'
    win: window.WIN_BLACKMAN
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 1752.0]
    rotation: 0
    state: enabled
- name: band_pass_filter_0_1
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: int(if_samp_rate/if2_samp_rate)
    gain: '1'
    high_cutoff_freq: bpf_high[rx_bw]
    interp: '1'
    low_cutoff_freq: bpf_low[rx_bw]
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: if_samp_rate
    type: fir_filter_ccc
    width: '100'
    win: window.WIN_BLACKMAN
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 1408.0]
    rotation: 0
    state: enabled
- name: band_pass_filter_0_2
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: '4000'
    interp: '1'
    low_cutoff_freq: '200'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: audio_samp_rate
    type: fir_filter_fff
    width: '500'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 2744.0]
    rotation: 0
    state: enabled
- name: band_plan
  id: snippet
  parameters:
    alias: ''
    code: "self.ham_bands = {\n    '50-CW':    (50000000,   50100000,   50090000,\
      \    500, ['CW']),\n    '50-SSB':   (50100000,   50300000,   50150000,   2700,\
      \ ['CW', 'USB','LSB']),\n    '50-FT8':   (50300000,   50400000,   50313000,\
      \   2700, ['MGM','FT8','USB']),\n    '50-PSK':   (50300000,   50400000,   50305000,\
      \   2700, ['MGM','PSK','USB']),\n    '50-MSK':   (50300000,   50400000,   50350000,\
      \   2700, ['MGM','MSK','USB']), \n    '50-B':     (50400000,   50500000,   50450000,\
      \   1000, ['None']),  # Beacons only\n    '50-FM':    (50500000,   52000000,\
      \   51510000,  12000, ['FM', 'CW', 'SSB']),\n    '87-WBFM':    (87500000,  108000000,\
      \   89300000, 200000, ['WBFM']),  # FM broadcast\n    '144-SAT':  (144000000,\
      \ 144025000,  144010000,   2700, ['None']),  # Sat downlink,\n    '144-CW':\
      \   (144025000, 144100000,  144050000,    500, ['CW']),\n    '144-MGM':  (144100000,\
      \ 144150000,  144116000,    500, ['CW', 'Q65', 'JT65'],'USB'),\n    '144-Q65':\
      \  (144100000, 144150000,  144125000,    500, ['MGM','Q65','USB']),\n    '144-JT65':\
      \ (144100000, 144150000,  144120000,    500, ['MGM','JT65','USB']),\n    '144-FT8':\
      \  (144150000, 144400000,  144174000,   2700, ['MGM','USB']),\n    '144-SSB':\
      \  (144150000, 144400000,  144300000,   2700, ['USB', 'CW', 'FT8', 'JT65', 'Q65','LSB']),\n\
      \    '144-MSK':  (144150000, 144400000,  144360000,   2700, ['MGM','MSK','USB']),\n\
      \    '144-B':    (144400000, 144490000,  144406000,    500, ['CW']),  # Beacons\n\
      \    '144-PB':   (144491000, 144493000,  144492000,    500, ['CW', 'FT8']),\
      \  # Personal beacons\n    '432-EME':  (432000000, 432025000,  432010000,  \
      \  500, ['CW']),\n    '432-CW':   (432025000, 432100000,  432050000,    500,\
      \ ['CW','PSK']),\n    '432-FT8':  (432150000, 432400000,  432174000,   2700,\
      \ ['MGM','FT8','USB']),\n    '432-SSB':  (432100000, 432400000,  432200000,\
      \   2700, ['CW', 'USB']),\n    '432-FSK':  (432100000, 432400000,  432370000,\
      \   2700, ['CW', 'USB', 'FSK441','LSB']),\n    '432-B':    (432400000, 432490000,\
      \  432412170,    500, ['CW']), # Beacons 70cm / SK6UHF\n    '1296-B':  (1296800000,\
      \ 1296994000,1296811000,    500, ['CW']), # Beacons 23cm\n\n\n\n}\nself.ham_bands_keys\
      \ = list(self.ham_bands)\nself._band_selector_options = self.ham_bands_keys\n\
      self._band_selector_labels = self.ham_bands_keys\n\nself._band_selector_combo_box.setMinimumContentsLength(10)\n\
      \ndef find_valid_mode(self, valid_modes):\n\tavailable_modes = self.mode.labels\n\
      \tprint(available_modes)\n\tprint(valid_modes)\n\n\tfor mode in valid_modes:\n\
      \t\tif mode in available_modes:\n\t\t\treturn available_modes.index(mode) \n\
      \treturn 0"
    comment: 'This python snippet defines which frequency bands the transceiver supports.

      Each band has a designator, a min and max frequency, a default frequency and
      a list of

      allowed transmission modes.'
    priority: '0'
    section: main_after_init
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 556.0]
    rotation: 0
    state: true
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '4'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1712, 1780.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_float_0_1_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1232, 1772.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_float_0_2
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 1804.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_float_0_2_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 1460.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_float_0_2_0_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 1428.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 1828.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_real_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2200, 1636.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_real_0_0_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2200, 1532.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_char_0
  id: blocks_float_to_char
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1 if mode > 0 else 0
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 3164.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0_0_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 1740.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0_0_1
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 2220.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0_1
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 1772.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0_1_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 1428.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0_1_0_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 1396.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0_3
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 3052.0]
    rotation: 0
    state: enabled
- name: blocks_integrate_xx_0
  id: blocks_integrate_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: if2_samp_rate*2
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1928, 1828.0]
    rotation: 0
    state: enabled
- name: blocks_integrate_xx_1
  id: blocks_integrate_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 3164.0]
    rotation: 0
    state: enabled
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(fft_decim)
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 1604.0]
    rotation: 0
    state: enabled
- name: blocks_keep_one_in_n_0_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(wbfm_if2_samp_rate/if2_samp_rate)
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 1836.0]
    rotation: 0
    state: enabled
- name: blocks_keep_one_in_n_0_1
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(wbfm_if2_samp_rate/if2_samp_rate)
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 1884.0]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1816, 2332.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: cw_txing
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 3164.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: ssb_txing
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [816, 2244.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_1
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: rx_fq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1760, 452.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_1_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: rx_hw_fq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2096, 364.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_1_0_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: filter_fq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2096, 308.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_1_1
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: tx_fq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2192, 532.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: monitor*0.0001*1000
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 3260.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: cw_level
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 3052.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: 0.03*spkr_gain *af_right
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2632, 1812.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: mgm_output_gain *af_right
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2632, 1940.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1_0_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: mgm_input_gain
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [196.0, 2504]
    rotation: 90
    state: enabled
- name: blocks_multiply_const_vxx_1_0_0_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: mic_gain
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 2588.0]
    rotation: 180
    state: enabled
- name: blocks_multiply_const_vxx_1_0_0_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: vox_sensitivity/20
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 2244.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1_0_1_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: 0.03*spkr_gain*(1-af_right)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2632, 1764.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1_0_1_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: mgm_output_gain*(1-af_right)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2632, 1892.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1_0_1_0_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: fm_gain*1.3
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2184, 1940.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1_0_1_0_1_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: fm_gain*1.3
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2184, 1988.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1_0_1_0_1_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: fm_gain*0.3
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2184, 2052.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_4_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: lsb_chain_gain[side_band_rx]
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 1820.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_4_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: usb_chain_gain[side_band_rx]
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 1476.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_4_0_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: wbfm_chain_gain[side_band_rx]
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1256, 1924.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_4_0_1_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: nbfm_chain_gain[side_band_rx]
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1256, 2028.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_matrix_xx_0
  id: blocks_multiply_matrix_xx
  parameters:
    A: af_mix_matrices[side_band_rx]
    affinity: ''
    alias: ''
    comment: "Instead of using a selector here, \nthe multiply by matrix does the\
      \ \nsame thing, but does not introduce \ndifferent delays for the different\
      \ chains\ncausing stereo signals go out of sync."
    maxoutbuf: '0'
    minoutbuf: '0'
    tag_propagation_policy: gr.TPP_DONT
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2448, 1772.0]
    rotation: 0
    state: true
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 3252.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 2124.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 2412.0]
    rotation: 0
    state: enabled
- name: blocks_nlog10_ff_0
  id: blocks_nlog10_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: RX_power_offset_dB
    maxoutbuf: '0'
    minoutbuf: '0'
    n: '10.6'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2048, 1828.0]
    rotation: 0
    state: enabled
- name: blocks_null_sink_2
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 2484.0]
    rotation: 180
    state: true
- name: blocks_null_sink_2_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 2724.0]
    rotation: 0
    state: true
- name: blocks_null_sink_2_0_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1736, 2820.0]
    rotation: 0
    state: true
- name: blocks_null_source_1
  id: blocks_null_source
  parameters:
    affinity: ''
    alias: ''
    bus_structure_source: '[[0,],]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 2452.0]
    rotation: 0
    state: true
- name: blocks_probe_signal_x_0
  id: blocks_probe_signal_x
  parameters:
    affinity: ''
    alias: ''
    comment: S-meter
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2136, 1828.0]
    rotation: 0
    state: enabled
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: int(6* cw_samp_rate / morse_speed)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 2940.0]
    rotation: 0
    state: enabled
- name: blocks_repeat_0_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: output samp rate = 3 MHz
    interp: int(tx_samp_rate/cw_samp_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 3068.0]
    rotation: 0
    state: enabled
- name: blocks_selector_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: "The SSB signal selector either sends the output to the SDR output \n\
      or to a Null sink depending on the current mode. There is no way to actually\n\
      turn the path off."
    enabled: 'True'
    input_index: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '1'
    num_outputs: '2'
    output_index: (ssb_txing or ssb_txing_btn) and 0 < mode < 6
    showports: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1172.0, 2352]
    rotation: 270
    state: true
- name: blocks_selector_0_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: "The FM signal selector either sends the output to the SDR output \n\
      or to a Null sink depending on the current mode. There is no way to actually\n\
      turn the path off."
    enabled: 'True'
    input_index: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '1'
    num_outputs: '2'
    output_index: (ssb_txing or ssb_txing_btn) and side_band_tx == 2
    showports: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 2760.0]
    rotation: 0
    state: true
- name: blocks_selector_1
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: "The RF signal selector selecte between a SSB signal, a CW signal or\
      \ None, \ndepending on mode."
    enabled: 'True'
    input_index: max(side_band_tx -1, 0)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '3'
    num_outputs: '2'
    output_index: 1 if  (ssb_txing or ssb_txing_btn) and side_band_tx else 0
    showports: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 2908.0]
    rotation: 0
    state: enabled
- name: blocks_selector_2
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    input_index: mode_to_audio_input[mode]
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '3'
    num_outputs: '1'
    output_index: '0'
    showports: 'True'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [172.0, 2320]
    rotation: 90
    state: true
- name: blocks_uchar_to_float_0
  id: blocks_uchar_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 2940.0]
    rotation: 0
    state: enabled
- name: clear_cw_msg
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: clear_cw_msg
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 2988.0]
    rotation: 0
    state: true
- name: cq_msg_in
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1968, 3516.0]
    rotation: 0
    state: true
- name: cw_msg_in
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 2956.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nMorse code vector source\n\"\"\"\n\n#  epy_block_0.py\n\
      #  revised 09/10/2019 - finish code table\n#  revised 09/11/2019 - test for\
      \ bad character\n#  revised 09/27/2019 - get input from a Message Edit block\
      \ (code from Volker Schroer dl1ksv)\n\nimport numpy as np\nfrom gnuradio import\
      \ gr\n\nimport pmt\n\ntextboxValue = \"\"\n\nMorse = {\n    # codes from https://www.itu.int/rec/R-REC-M.1677-1-200910-I/en\n\
      \    \"A\": \"10111\",\n    \"B\": \"111010101\",\n    \"C\": \"11101011101\"\
      ,\n    \"D\": \"1110101\",\n    \"E\": \"1\",\n    \"F\": \"101011101\",\n \
      \   \"G\": \"111011101\",\n    \"H\": \"1010101\",\n    \"I\": \"101\",\n  \
      \  \"J\": \"1011101110111\",\n    \"K\": \"111010111\",\n    \"L\": \"101110101\"\
      ,\n    \"M\": \"1110111\",\n    \"N\": \"11101\",\n    \"O\": \"11101110111\"\
      ,\n    \"P\": \"10111011101\",\n    \"Q\": \"1110111010111\",\n    \"R\": \"\
      1011101\",\n    \"S\": \"10101\",\n    \"T\": \"111\",\n    \"U\": \"1010111\"\
      ,\n    \"V\": \"101010111\",\n    \"W\": \"101110111\",\n    \"X\": \"11101010111\"\
      ,\n    \"Y\": \"1110101110111\",\n    \"Z\": \"11101110101\",\n    \"\xC5\"\
      : \"101110111010111\",\n    \"\xC4\": \"10111010111\",\n    \"\xD6\": \"1110111011101\"\
      ,\n    \" \": \"0\",\n    \"1\": \"10111011101110111\",\n    \"2\": \"101011101110111\"\
      ,\n    \"3\": \"1010101110111\",\n    \"4\": \"10101010111\",\n    \"5\": \"\
      101010101\",\n    \"6\": \"11101010101\",\n    \"7\": \"1110111010101\",\n \
      \   \"8\": \"111011101110101\",\n    \"9\": \"11101110111011101\",\n    \"0\"\
      : \"1110111011101110111\",\n    \".\": \"10111010111010111\",  # period\n  \
      \  \",\": \"1110111010101110111\",  # comma\n    \":\": \"11101110111010101\"\
      ,  # colon\n    \"?\": \"101011101110101\",  # question\n    \"'\": \"1011101110111011101\"\
      ,  # apostrophe\n    \"-\": \"111010101010111\",  # dash or minus\n    \"/\"\
      : \"1110101011101\",  # slash\n    \"(\": \"111010111011101\",  # left parenthesis\n\
      \    \")\": \"1110101110111010111\",  # right parenthesis\n    \"\\\"\": \"\
      101110101011101\",  # quote\n    \"=\": \"1110101010111\",  # equals\n    \"\
      +\": \"1011101011101\",  # plus\n    \"@\": \"10111011101011101\",  # at sign\
      \ (@)\n    # these punctuation marks are not included in the ITU recommendation\n\
      \    # but are found in https://en.wikipedia.org/wiki/Morse_code\n    \"!\"\
      : \"1110101110101110111\",  # exclamation point\n    \"&\": \"10111010101\"\
      ,  # ampersand (also prosign for 'WAIT')\n    \";\": \"11101011101011101\",\
      \  # semicolon\n    \"_\": \"10101110111010111\",  # underscore\n    \"$\":\
      \ \"10101011101010111\"  # dollar sign\n}\n\n\nclass mc_sync_block(gr.sync_block):\n\
      \    \"\"\"\n    reads input from a message port\n    generates a vector of\
      \ Morse code bits\n    \"\"\"\n\n    def __init__(self, enable=True):\n    \
      \    gr.sync_block.__init__(self,\n                               name=\"Morse\
      \ code vector source\",\n                               in_sig=None,\n     \
      \                          out_sig=[np.byte])\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('clear_input'))\n       \
      \ self.set_msg_handler(pmt.intern('msg_in'), self.handle_msg)\n        self.enable=enable\n\
      \        self.textboxValue = None\n\n    def handle_msg(self, msg):\n      \
      \  global textboxValue\n        print(msg)\n        if pmt.is_symbol(msg):\n\
      \            self.textboxValue = pmt.symbol_to_string(msg)\n        else:\n\
      \            self.textboxValue = pmt.to_python(pmt.cdr(msg))\n        print(textboxValue)\n\
      \n    def work(self, input_items, output_items):\n\n        nbit_stream = \"\
      \"\n\n        if not self.enable:\n            self.message_port_pub(pmt.intern('clear_input'),\
      \ pmt.intern(''))\n            return 0\n\n        if not self.textboxValue:\n\
      \            # nbit_stream = \"0000000000000000000000\"\n            return\
      \ 0\n        else:\n\n            for ch in self.textboxValue:\n           \
      \     nbit_stream += (Morse.get(ch.upper()) if ch.upper() in Morse else Morse.get('?'))\
      \ + \"000\"\n            nbit_stream += \"0000\"\n\n        #print(nbit_stream)\n\
      \n        for x in range(len(nbit_stream)):\n            output_items[0][x]\
      \ = int(nbit_stream[x])\n\n        # clear input line\n        self.textboxValue\
      \ = \"\"\n        self.message_port_pub(pmt.intern('clear_input'), pmt.intern(''))\n\
      \        return len(nbit_stream)\n"
    affinity: ''
    alias: ''
    comment: ''
    enable: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Morse code vector source', 'mc_sync_block', [('enable', 'True')],
      [('msg_in', 'message', 1)], [('0', 'byte', 1), ('clear_input', 'message', 1)],
      '\n    reads input from a message port\n    generates a vector of Morse code
      bits\n    ', ['enable'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 2940.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport threading\nimport\
      \ typing as T\n\nimport numpy as np\nimport pmt\nfrom gnuradio import gr\nimport\
      \ time\n\n\nclass one_shot:\n\n    def __init__(self, delay: float, callback:\
      \ T.Callable):\n        self.delay = delay\n        self.timer = None\n    \
      \    self.callback = callback\n        self.last_start = None\n        self.to_sleep\
      \ = None\n        self.thread = None\n\n    def countdown(self):\n        now\
      \ = time.time_ns()\n        if self.to_sleep is None:\n            self.last_start\
      \ = None\n            #print(\"Timer timed out, at %d last_start is now %s\"\
      \ % (now, self.last_start))\n            self.timer.cancel()\n            self.callback()\n\
      \            return\n        self.timer = threading.Timer(self.to_sleep, self.countdown)\n\
      \        self.timer.start()\n        self.last_start = now\n        #print(\"\
      Timer restarted at %d for %f seconds\" % (self.last_start, self.to_sleep))\n\
      \        self.to_sleep = None\n\n    def trigger(self):\n        now = time.time_ns()\n\
      \        if self.last_start is None:\n            self.to_sleep = self.delay\n\
      \            self.timer = threading.Timer(self.to_sleep, self.countdown)\n \
      \           self.timer.start()\n            self.last_start = now\n        \
      \    #print(\"Timer started at %d for %f seconds\" % (self.last_start, self.to_sleep))\n\
      \            self.to_sleep = None\n            return\n        else:\n     \
      \       #print(\"Trig, last_start=%f\" % self.last_start)\n            self.to_sleep\
      \ = (now - self.last_start) / 1000000000\n            #print(\"Timer retrig\
      \ at %d, To_sleep = %f\" % (now, self.to_sleep))\n\n\n# noinspection PyPep8Naming\n\
      class blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"VOX detector - sends a message when detecting a signal\
      \ and another some time after the signal has been absent\n       threshold is\
      \ the signal level needed to trigger an on-air message\n       attack is the\
      \ number of consecutive samples needed before the message is sent\n       delay\
      \ is the number of seconds after the last sample over the threshold level that\
      \ the off-air\n       message is sent.\n\n       The on-air message is represented\
      \ by the message pair (\"onair\", 1) and the off-air message is represented\
      \ by the\n       message pair (\"onair\", 0)\n\n       The output stream contains\
      \ 100 zeros if the last message sent is am off-air message and 100 ones\n  \
      \     if the last message sent is a on-air message. Whenever a message is sent\
      \ a ramp string of samples\n       are sent, going from 0 to 1 on any on-air\
      \ signal and from 1 to 0 on any off-air signal.\n\n       Note that the incoming\
      \ stream needs to represent the volume level of the audio, not the audio samples\
      \ themselves.\n\n       \"\"\"\n\n    def __init__(self, threshold=5, attack=10,\
      \ delay=0.5):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='VOX detector',  # will show up in GRC\n\
      \            in_sig=[np.ubyte],\n            out_sig=None\n        )\n     \
      \   # if an attribute with the same name as a parameter is found,\n        #\
      \ a callback is registered (properties work, too).\n        self.threshold =\
      \ threshold\n        self.attack = attack\n        self.delay = delay\n\n  \
      \      self.attack_counter = attack  # Counts down to 0\n        self.one_shot\
      \ = None\n        self.message_port_register_out(pmt.intern(\"onair\"))\n  \
      \      self.onair = False\n        # self.to_output = []\n\n    def send_onair_message(self):\n\
      \        if not self.onair:\n            self.message_port_pub(pmt.intern(\"\
      onair\"), pmt.cons(pmt.string_to_symbol(\"onair\"), pmt.to_pmt(1)))\n      \
      \      self.onair = True\n            # self.ramp_up()\n\n    def send_offair_message(self):\n\
      \        if self.onair:\n            self.message_port_pub(pmt.intern(\"onair\"\
      ), pmt.cons(pmt.string_to_symbol(\"onair\"), pmt.to_pmt(0)))\n            self.onair\
      \ = False\n            # self.ramp_down()\n\n    def ramp_up(self):\n      \
      \  self.to_output = []\n        for i in range(0, 128):\n            self.to_output.append(i/128)\n\
      \n    def ramp_down(self):\n        self.to_output = []\n        for i in range(0,\
      \ 100):\n            self.to_output.append(1 - i/128)\n\n\n    def work(self,\
      \ input_items, output_items):\n        #print(\"Input0(%d)=\" % len(input_items[0]),\
      \ input_items[0])\n        # print(\"Output0(%d)=\" % len(output_items[0]),\
      \ output_items[0])\n        for item in input_items[0]:\n            if item\
      \ is not None:\n                item = -item if item < 0 else item\n       \
      \         if item > self.threshold:\n                    self.attack_counter\
      \ -= 1\n                    if self.attack_counter <= 0:\n                 \
      \       self.send_onair_message()\n                        self.trigger_one_shot()\n\
      \                        self.attack_counter = self.attack\n               \
      \ else:\n                    self.attack_counter = self.attack\n        else:\n\
      \            self.attack_counter = self.attack\n\n        self.consume(0, len(input_items[0]))\n\
      \        # self.produce(0, 128)\n        # output_items[0] = self.to_output\n\
      \        # self.to_output = [1 if self.onair else 0 for i in range(0, 128)]\n\
      \n        # return len(output_items[0])\n        return 0\n\n    def trigger_one_shot(self):\n\
      \        if self.one_shot is None:\n            self.one_shot = one_shot(self.delay,\
      \ self.send_offair_message)\n            #print(\"Oneshot created\")\n     \
      \   self.one_shot.trigger()\n        #print(\"Oneshot triggered\")\n"
    affinity: ''
    alias: ''
    attack: '1'
    comment: ''
    delay: 6/morse_speed * 25 + 2
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: '0.4'
  states:
    _io_cache: ('VOX detector', 'blk', [('threshold', '5'), ('attack', '10'), ('delay',
      '0.5')], [('0', 'byte', 1)], [('onair', 'message', 1)], 'VOX detector - sends
      a message when detecting a signal and another some time after the signal has
      been absent\n       threshold is the signal level needed to trigger an on-air
      message\n       attack is the number of consecutive samples needed before the
      message is sent\n       delay is the number of seconds after the last sample
      over the threshold level that the off-air\n       message is sent.\n\n       The
      on-air message is represented by the message pair ("onair", 1) and the off-air
      message is represented by the\n       message pair ("onair", 0)\n\n       The
      output stream contains 100 zeros if the last message sent is am off-air message
      and 100 ones\n       if the last message sent is a on-air message. Whenever
      a message is sent a ramp string of samples\n       are sent, going from 0 to
      1 on any on-air signal and from 1 to 0 on any off-air signal.\n\n       Note
      that the incoming stream needs to represent the volume level of the audio, not
      the audio samples themselves.\n\n       ', ['attack', 'delay', 'threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 3156.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport threading\nimport\
      \ typing as T\n\nimport numpy as np\nimport pmt\nfrom gnuradio import gr\nimport\
      \ time\n\n\nclass one_shot:\n\n    def __init__(self, delay: float, callback:\
      \ T.Callable):\n        self.delay = delay\n        self.timer = None\n    \
      \    self.callback = callback\n        self.last_start = None\n        self.to_sleep\
      \ = None\n        self.thread = None\n\n    def countdown(self):\n        now\
      \ = time.time_ns()\n        if self.to_sleep is None:\n            self.last_start\
      \ = None\n            #print(\"Timer timed out, at %d last_start is now %s\"\
      \ % (now, self.last_start))\n            self.timer.cancel()\n            self.callback()\n\
      \            return\n        self.timer = threading.Timer(self.to_sleep, self.countdown)\n\
      \        self.timer.start()\n        self.last_start = now\n        #print(\"\
      Timer restarted at %d for %f seconds\" % (self.last_start, self.to_sleep))\n\
      \        self.to_sleep = None\n\n    def trigger(self):\n        now = time.time_ns()\n\
      \        if self.last_start is None:\n            self.to_sleep = self.delay\n\
      \            self.timer = threading.Timer(self.to_sleep, self.countdown)\n \
      \           self.timer.start()\n            self.last_start = now\n        \
      \    #print(\"Timer started at %d for %f seconds\" % (self.last_start, self.to_sleep))\n\
      \            self.to_sleep = None\n            return\n        else:\n     \
      \       #print(\"Trig, last_start=%f\" % self.last_start)\n            self.to_sleep\
      \ = (now - self.last_start) / 1000000000\n            #print(\"Timer retrig\
      \ at %d, To_sleep = %f\" % (now, self.to_sleep))\n\n\n# noinspection PyPep8Naming\n\
      class blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"VOX detector - sends a message when detecting a signal\
      \ and another some time after the signal has been absent\n       threshold is\
      \ the signal level needed to trigger an on-air message\n       attack is the\
      \ number of consecutive samples needed before the message is sent\n       delay\
      \ is the number of seconds after the last sample over the threshold level that\
      \ the off-air\n       message is sent.\n\n       The on-air message is represented\
      \ by the message pair (\"onair\", 1) and the off-air message is represented\
      \ by the\n       message pair (\"onair\", 0)\n\n       The output stream contains\
      \ 100 zeros if the last message sent is am off-air message and 100 ones\n  \
      \     if the last message sent is a on-air message. Whenever a message is sent\
      \ a ramp string of samples\n       are sent, going from 0 to 1 on any on-air\
      \ signal and from 1 to 0 on any off-air signal.\n\n       Note that the incoming\
      \ stream needs to represent the volume level of the audio, not the audio samples\
      \ themselves.\n\n       \"\"\"\n\n    def __init__(self, threshold=5, attack=10,\
      \ delay=0.5):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='VOX detector',  # will show up in GRC\n\
      \            in_sig=[np.float32],\n            out_sig=None\n        )\n   \
      \     # if an attribute with the same name as a parameter is found,\n      \
      \  # a callback is registered (properties work, too).\n        self.threshold\
      \ = threshold\n        self.attack = attack\n        self.delay = delay\n\n\
      \        self.attack_counter = attack  # Counts down to 0\n        self.one_shot\
      \ = None\n        self.message_port_register_out(pmt.intern(\"onair\"))\n  \
      \      self.onair = False\n        # self.to_output = []\n\n    def send_onair_message(self):\n\
      \        if not self.onair:\n            self.message_port_pub(pmt.intern(\"\
      onair\"), pmt.cons(pmt.string_to_symbol(\"onair\"), pmt.to_pmt(1)))\n      \
      \      self.onair = True\n            # self.ramp_up()\n\n    def send_offair_message(self):\n\
      \        if self.onair:\n            self.message_port_pub(pmt.intern(\"onair\"\
      ), pmt.cons(pmt.string_to_symbol(\"onair\"), pmt.to_pmt(0)))\n            self.onair\
      \ = False\n            # self.ramp_down()\n\n    def ramp_up(self):\n      \
      \  self.to_output = []\n        for i in range(0, 128):\n            self.to_output.append(i/128)\n\
      \n    def ramp_down(self):\n        self.to_output = []\n        for i in range(0,\
      \ 100):\n            self.to_output.append(1 - i/128)\n\n\n    def work(self,\
      \ input_items, output_items):\n        # print(\"Input0(%f)=\" % len(input_items[0]),\
      \ input_items[0])\n        # print(\"Output0(%d)=\" % len(output_items[0]),\
      \ output_items[0])\n        for item in input_items[0]:\n            if item\
      \ is not None:\n                item = -item if item < 0 else item\n       \
      \         if item > self.threshold:\n                    self.attack_counter\
      \ -= 1\n                    if self.attack_counter <= 0:\n                 \
      \       self.send_onair_message()\n                        self.trigger_one_shot()\n\
      \                        self.attack_counter = self.attack\n               \
      \ else:\n                    self.attack_counter = self.attack\n        else:\n\
      \            self.attack_counter = self.attack\n\n        self.consume(0, len(input_items[0]))\n\
      \        # self.produce(0, 128)\n        # output_items[0] = self.to_output\n\
      \        # self.to_output = [1 if self.onair else 0 for i in range(0, 128)]\n\
      \n        # return len(output_items[0])\n        return 0\n\n    def trigger_one_shot(self):\n\
      \        if self.one_shot is None:\n            self.one_shot = one_shot(self.delay,\
      \ self.send_offair_message)\n            # print(\"Oneshot created\")\n    \
      \    self.one_shot.trigger()\n        # print(\"Oneshot triggered\")\n"
    affinity: ''
    alias: ''
    attack: vox_attack[mode]
    comment: ''
    delay: vox_delay[mode]
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: vox_threshold[mode]
  states:
    _io_cache: ('VOX detector', 'blk', [('threshold', '5'), ('attack', '10'), ('delay',
      '0.5')], [('0', 'float', 1)], [('onair', 'message', 1)], 'VOX detector - sends
      a message when detecting a signal and another some time after the signal has
      been absent\n       threshold is the signal level needed to trigger an on-air
      message\n       attack is the number of consecutive samples needed before the
      message is sent\n       delay is the number of seconds after the last sample
      over the threshold level that the off-air\n       message is sent.\n\n       The
      on-air message is represented by the message pair ("onair", 1) and the off-air
      message is represented by the\n       message pair ("onair", 0)\n\n       The
      output stream contains 100 zeros if the last message sent is am off-air message
      and 100 ones\n       if the last message sent is a on-air message. Whenever
      a message is sent a ramp string of samples\n       are sent, going from 0 to
      1 on any on-air signal and from 1 to 0 on any off-air signal.\n\n       Note
      that the incoming stream needs to represent the volume level of the audio, not
      the audio samples themselves.\n\n       ', ['attack', 'delay', 'threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 2236.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\nimport time\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Message gate. This module either transfer messages reads a message from the\
      \ input port and\n        applies a python expression on it before sending it\
      \ along on the output port\n\n        Parameters:\n            expr: String.\
      \ The expression to apply. May use variables.\"\"\"\n\n    def __init__(self,\
      \ offset=0, factor=10):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Message mangler',  # will show up in GRC\n\
      \            in_sig=None,\n            out_sig=None\n        )\n\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('msg_out'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n        self.offset=offset\n        self.factor=factor\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n\n\n    def handle_msg(self,\
      \ msg):\n            adj = self.factor*pmt.to_python(pmt.cdr(msg))\n       \
      \     new_value = self.offset + adj\n            print(adj, new_value)\n   \
      \         p = pmt.to_pmt(new_value)\n            self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.cons(pmt.intern(\"fq\"), p))\n            time.sleep(0.1)\n\
      \            self.message_port_pub(pmt.intern(\"msg_out\"), pmt.cons(pmt.intern(\"\
      fq\"), p))"
    affinity: ''
    alias: ''
    comment: ''
    factor: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
  states:
    _io_cache: '(''Message mangler'', ''blk'', [(''offset'', ''0''), (''factor'',
      ''10'')], [(''msg_in'', ''message'', 1)], [(''msg_out'', ''message'', 1)], ''Message
      gate. This module either transfer messages reads a message from the input port
      and\n        applies a python expression on it before sending it along on the
      output port\n\n        Parameters:\n            expr: String. The expression
      to apply. May use variables.'', [''factor'', ''offset''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 1616.0]
    rotation: 0
    state: true
- name: filter_fft_low_pass_filter_0
  id: filter_fft_low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: ssb_tx_bandwidth
    decim: '1'
    gain: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_rate: tx_samp_rate
    type: ccc
    width: '50'
    win: window.WIN_RECTANGULAR
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240.0, 2720]
    rotation: 270
    state: true
- name: filter_fft_low_pass_filter_0_0
  id: filter_fft_low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: ssb_tx_bandwidth/2-200
    decim: '2'
    gain: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_rate: audio_samp_rate
    type: fff
    width: '50'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 2104.0]
    rotation: 0
    state: true
- name: filter_fft_low_pass_filter_0_0_0
  id: filter_fft_low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: ssb_tx_bandwidth/2-200
    decim: '2'
    gain: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_rate: audio_samp_rate
    type: fff
    width: '50'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 2392.0]
    rotation: 0
    state: true
- name: freq_xlating_fft_filter_ccc_1
  id: freq_xlating_fft_filter_ccc
  parameters:
    affinity: ''
    alias: ''
    center_freq: filter_fq+cw_midear_beat[side_band_rx]
    comment: ''
    decim: int(rx_samp_rate/if0_samp_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    samp_rate: rx_samp_rate
    taps: firdes.low_pass(1,rx_samp_rate,rx_samp_rate/(2*1),3900)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 1800.0]
    rotation: 0
    state: enabled
- name: freq_xlating_fft_filter_ccc_1_0
  id: freq_xlating_fft_filter_ccc
  parameters:
    affinity: ''
    alias: ''
    center_freq: filter_fq-cw_midear_beat[side_band_rx]
    comment: ''
    decim: int(rx_samp_rate/if0_samp_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    samp_rate: rx_samp_rate
    taps: firdes.low_pass(1,rx_samp_rate,rx_samp_rate/(2*1),3900)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 1456.0]
    rotation: 0
    state: enabled
- name: freq_xlating_fft_filter_ccc_1_0_0
  id: freq_xlating_fft_filter_ccc
  parameters:
    affinity: ''
    alias: ''
    center_freq: filter_fq
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    samp_rate: rx_samp_rate
    taps: firdes.low_pass(1,rx_samp_rate,rx_samp_rate/(2*1),3900)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 1584.0]
    rotation: 0
    state: enabled
- name: frequency_counter
  id: note
  parameters:
    alias: ''
    comment: ''
    note: '''{:.0f}''.format((lo_freq_Hz[freq_chooser]+tune+fine_tune))'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 580.0]
    rotation: 0
    state: enabled
- name: msg_formatter
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Message\
      \ gate. This module either transfer messages reads a message from the input\
      \ port and\n        applies a python expression on it before sending it along\
      \ on the output port\n\n        Parameters:\n            expr: String. The expression\
      \ to apply. May use variables.\"\"\"\n\n    def __init__(self, variables=None):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Message formatter',  # will show up in GRC\n  \
      \          in_sig=None,\n            out_sig=None\n        )\n\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('msg_out'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n\n        self._variables=variables\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n\n\n    @property\n    def variables(self):\n   \
      \     \"\"\"The gate control parameter tells whether messages are to be transferred\
      \ or not\"\"\"\n        return self._variables\n\n    @variables.setter\n  \
      \  def variables(self, value):\n        self._variables = value\n        print(\"\
      Variables set to\", self._variables)\n\n    @variables.deleter\n    def variables(self):\n\
      \        del self._variables\n\n\n\n    def handle_msg(self, msg):\n       \
      \     new_value = pmt.to_python(pmt.cdr(msg)) % self._variables\n          \
      \  p = pmt.to_pmt(new_value)\n            self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.cons(pmt.intern(\"msg\"), p))\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    variables: (dx_call)
  states:
    _io_cache: '(''Message formatter'', ''blk'', [(''variables'', ''None'')], [(''msg_in'',
      ''message'', 1)], [(''msg_out'', ''message'', 1)], ''Message gate. This module
      either transfer messages reads a message from the input port and\n        applies
      a python expression on it before sending it along on the output port\n\n        Parameters:\n            expr:
      String. The expression to apply. May use variables.'', [''variables''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1640, 3516.0]
    rotation: 0
    state: true
- name: msg_formatter_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Message\
      \ gate. This module either transfer messages reads a message from the input\
      \ port and\n        applies a python expression on it before sending it along\
      \ on the output port\n\n        Parameters:\n            expr: String. The expression\
      \ to apply. May use variables.\"\"\"\n\n    def __init__(self, variables=None):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Message formatter',  # will show up in GRC\n  \
      \          in_sig=None,\n            out_sig=None\n        )\n\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('msg_out'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n\n        self._variables=variables\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n\n\n    @property\n    def variables(self):\n   \
      \     \"\"\"The gate control parameter tells whether messages are to be transferred\
      \ or not\"\"\"\n        return self._variables\n\n    @variables.setter\n  \
      \  def variables(self, value):\n        self._variables = value\n        print(\"\
      Variables set to\", self._variables)\n\n    @variables.deleter\n    def variables(self):\n\
      \        del self._variables\n\n\n\n    def handle_msg(self, msg):\n       \
      \     new_value = pmt.to_python(pmt.cdr(msg)) % self._variables\n          \
      \  p = pmt.to_pmt(new_value)\n            self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.cons(pmt.intern(\"msg\"), p))\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    variables: (dx_call, tx_rprt, tx_rprt, tx_rprt, dx_call)
  states:
    _io_cache: '(''Message formatter'', ''blk'', [(''variables'', ''None'')], [(''msg_in'',
      ''message'', 1)], [(''msg_out'', ''message'', 1)], ''Message gate. This module
      either transfer messages reads a message from the input port and\n        applies
      a python expression on it before sending it along on the output port\n\n        Parameters:\n            expr:
      String. The expression to apply. May use variables.'', [''variables''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1640, 3588.0]
    rotation: 0
    state: true
- name: msg_formatter_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Message\
      \ gate. This module either transfer messages reads a message from the input\
      \ port and\n        applies a python expression on it before sending it along\
      \ on the output port\n\n        Parameters:\n            expr: String. The expression\
      \ to apply. May use variables.\"\"\"\n\n    def __init__(self, variables=None):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Message formatter',  # will show up in GRC\n  \
      \          in_sig=None,\n            out_sig=None\n        )\n\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('msg_out'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n\n        self._variables=variables\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n\n\n    @property\n    def variables(self):\n   \
      \     \"\"\"The gate control parameter tells whether messages are to be transferred\
      \ or not\"\"\"\n        return self._variables\n\n    @variables.setter\n  \
      \  def variables(self, value):\n        self._variables = value\n        print(\"\
      Variables set to\", self._variables)\n\n    @variables.deleter\n    def variables(self):\n\
      \        del self._variables\n\n\n\n    def handle_msg(self, msg):\n       \
      \     new_value = pmt.to_python(pmt.cdr(msg)) % self._variables\n          \
      \  p = pmt.to_pmt(new_value)\n            self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.cons(pmt.intern(\"msg\"), p))\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    variables: (dx_call, tx_rprt, tx_rprt, tx_rprt, dx_call)
  states:
    _io_cache: '(''Message formatter'', ''blk'', [(''variables'', ''None'')], [(''msg_in'',
      ''message'', 1)], [(''msg_out'', ''message'', 1)], ''Message gate. This module
      either transfer messages reads a message from the input port and\n        applies
      a python expression on it before sending it along on the output port\n\n        Parameters:\n            expr:
      String. The expression to apply. May use variables.'', [''variables''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1640, 3660.0]
    rotation: 0
    state: true
- name: msg_formatter_0_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Message\
      \ gate. This module either transfer messages reads a message from the input\
      \ port and\n        applies a python expression on it before sending it along\
      \ on the output port\n\n        Parameters:\n            expr: String. The expression\
      \ to apply. May use variables.\"\"\"\n\n    def __init__(self, variables=None):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Message formatter',  # will show up in GRC\n  \
      \          in_sig=None,\n            out_sig=None\n        )\n\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('msg_out'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n\n        self._variables=variables\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n\n\n    @property\n    def variables(self):\n   \
      \     \"\"\"The gate control parameter tells whether messages are to be transferred\
      \ or not\"\"\"\n        return self._variables\n\n    @variables.setter\n  \
      \  def variables(self, value):\n        self._variables = value\n        print(\"\
      Variables set to\", self._variables)\n\n    @variables.deleter\n    def variables(self):\n\
      \        del self._variables\n\n\n\n    def handle_msg(self, msg):\n       \
      \     new_value = pmt.to_python(pmt.cdr(msg)) % self._variables\n          \
      \  p = pmt.to_pmt(new_value)\n            self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.cons(pmt.intern(\"msg\"), p))\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    variables: (dx_call, tx_rprt, tx_rprt, tx_rprt, dx_call)
  states:
    _io_cache: '(''Message formatter'', ''blk'', [(''variables'', ''None'')], [(''msg_in'',
      ''message'', 1)], [(''msg_out'', ''message'', 1)], ''Message gate. This module
      either transfer messages reads a message from the input port and\n        applies
      a python expression on it before sending it along on the output port\n\n        Parameters:\n            expr:
      String. The expression to apply. May use variables.'', [''variables''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1640, 3732.0]
    rotation: 0
    state: true
- name: msg_formatter_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Message\
      \ gate. This module either transfer messages reads a message from the input\
      \ port and\n        applies a python expression on it before sending it along\
      \ on the output port\n\n        Parameters:\n            expr: String. The expression\
      \ to apply. May use variables.\"\"\"\n\n    def __init__(self, variables=None):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Message formatter',  # will show up in GRC\n  \
      \          in_sig=None,\n            out_sig=None\n        )\n\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('msg_out'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n\n        self._variables=variables\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n\n\n    @property\n    def variables(self):\n   \
      \     \"\"\"The gate control parameter tells whether messages are to be transferred\
      \ or not\"\"\"\n        return self._variables\n\n    @variables.setter\n  \
      \  def variables(self, value):\n        self._variables = value\n        print(\"\
      Variables set to\", self._variables)\n\n    @variables.deleter\n    def variables(self):\n\
      \        del self._variables\n\n\n\n    def handle_msg(self, msg):\n       \
      \     new_value = pmt.to_python(pmt.cdr(msg)) % self._variables\n          \
      \  p = pmt.to_pmt(new_value)\n            self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.cons(pmt.intern(\"msg\"), p))\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    variables: (cq_flavor, cq_flavor, cq_flavor, cq_flavor)
  states:
    _io_cache: '(''Message formatter'', ''blk'', [(''variables'', ''None'')], [(''msg_in'',
      ''message'', 1)], [(''msg_out'', ''message'', 1)], ''Message gate. This module
      either transfer messages reads a message from the input port and\n        applies
      a python expression on it before sending it along on the output port\n\n        Parameters:\n            expr:
      String. The expression to apply. May use variables.'', [''variables''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1760, 3340.0]
    rotation: 0
    state: true
- name: mulc_usb1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1408, 1396.0]
    rotation: 0
    state: enabled
- name: mulc_usb_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 1428.0]
    rotation: 0
    state: enabled
- name: mulc_usb_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 1772.0]
    rotation: 0
    state: enabled
- name: mulc_usb_0_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1384, 1740.0]
    rotation: 0
    state: enabled
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: The two chains decode USB and LSB separately. In CW stereo mode the center
      frequencies are split 1740 Hz apart.
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 1600.0]
    rotation: 0
    state: enabled
- name: note_0_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: USB RX chain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 1408.0]
    rotation: 0
    state: enabled
- name: note_0_0_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Waterfall RX chain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 1672.0]
    rotation: 0
    state: enabled
- name: note_0_1
  id: note
  parameters:
    alias: ''
    comment: ''
    note: LSB RX chain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 1888.0]
    rotation: 0
    state: enabled
- name: note_0_1_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: WBFM RX chain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 1944.0]
    rotation: 0
    state: enabled
- name: note_0_1_0_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: NBFM RX chain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 2000.0]
    rotation: 0
    state: enabled
- name: note_0_1_1
  id: note
  parameters:
    alias: ''
    comment: ''
    note: S meter chain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1752, 1880.0]
    rotation: 0
    state: enabled
- name: note_1
  id: note
  parameters:
    alias: ''
    comment: ''
    note: SSB TRANSMITTER SECTION
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 2080.0]
    rotation: 0
    state: enabled
- name: note_2
  id: note
  parameters:
    alias: ''
    comment: ''
    note: CW transmiter section
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 2904.0]
    rotation: 0
    state: true
- name: note_2_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: NBFM transmiter section
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 2800.0]
    rotation: 0
    state: true
- name: note_3
  id: note
  parameters:
    alias: ''
    comment: ''
    note: 'CW GUI '
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1592, 3304.0]
    rotation: 0
    state: true
- name: note_5
  id: note
  parameters:
    alias: ''
    comment: ''
    note: CONTROL SECTION
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 580.0]
    rotation: 0
    state: enabled
- name: note_6
  id: note
  parameters:
    alias: ''
    comment: ''
    note: SSB/CW receiver section
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 1464.0]
    rotation: 0
    state: true
- name: note_7
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Transmit signal selector and output
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1512, 2848.0]
    rotation: 0
    state: true
- name: op_tab
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: 4,4,3,2
    label0: SSB
    label1: MGM
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: CW
    label3: CW Op
    label4: Tab 4
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1728, 196.0]
    rotation: 0
    state: true
- name: pfb_decimator_ccf_0_0
  id: pfb_decimator_ccf
  parameters:
    affinity: ''
    alias: ''
    atten: '60'
    channel: '0'
    comment: ''
    decim: int(if0_samp_rate/if_samp_rate)
    fft_filts: 'True'
    fft_rot: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: firdes.low_pass(1,if0_samp_rate/2, 3900,100)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 1808.0]
    rotation: 0
    state: enabled
- name: pfb_decimator_ccf_0_0_0
  id: pfb_decimator_ccf
  parameters:
    affinity: ''
    alias: ''
    atten: '60'
    channel: '0'
    comment: ''
    decim: int(if0_samp_rate/if_samp_rate)
    fft_filts: 'True'
    fft_rot: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: firdes.low_pass(1,if0_samp_rate/2, 3900,100)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 1464.0]
    rotation: 0
    state: enabled
- name: pfb_decimator_ccf_0_0_0_0
  id: pfb_decimator_ccf
  parameters:
    affinity: ''
    alias: ''
    atten: '60'
    channel: '0'
    comment: ''
    decim: int(if0_samp_rate/wbfm_if2_samp_rate)
    fft_filts: 'True'
    fft_rot: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: firdes.low_pass(1,if0_samp_rate/2, 100000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 1904.0]
    rotation: 0
    state: enabled
- name: pfb_decimator_ccf_0_0_1
  id: pfb_decimator_ccf
  parameters:
    affinity: ''
    alias: ''
    atten: '60'
    channel: '0'
    comment: ''
    decim: int(if0_samp_rate/wbfm_if2_samp_rate)
    fft_filts: 'True'
    fft_rot: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: firdes.low_pass(1,if0_samp_rate/2, 5000,200)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 2008.0]
    rotation: 0
    state: enabled
- name: qtgui_edit_box_msg_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: op_tab@2:2,0,1,3
    is_pair: 'False'
    is_static: 'True'
    key: ''
    label: 'CW message to send:'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1632, 3376.0]
    rotation: 0
    state: true
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: audio_samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Microphone"'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: float
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [248, 2808.0]
    rotation: 0
    state: true
- name: qtgui_ledindicator_0_0
  id: qtgui_ledindicator
  parameters:
    affinity: ''
    alias: ''
    cellalignment: '1'
    comment: ''
    gui_hint: 1,5,1,1
    label: ON AIR
    maxSize: '20'
    offColor: black
    onColor: red
    position: '1'
    state: (ssb_txing or ssb_txing_btn or cw_txing)
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1968, 444.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: fft_bw_desired
    comment: ''
    fc: fft_center_fq
    fftsize: '4096'
    gui_hint: 4,0,3,4
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'False'
    plotfreq: 'True'
    plottime: 'False'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'True'
    showrf: 'True'
    type: complex
    wintype: window.WIN_HANN
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 1600.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(if2_samp_rate/1000)
    fbw: '0.4'
    interp: int(audio_samp_rate/1000)
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2064, 1624.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(if2_samp_rate/1000)
    fbw: '0.4'
    interp: int(audio_samp_rate/1000)
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2064, 1520.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_0_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(wbfm_if2_samp_rate/10000)
    fbw: '0.4'
    interp: int(audio_samp_rate/1000)
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 1952.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_0_0_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(wbfm_if2_samp_rate/10000)
    fbw: '0.4'
    interp: int(audio_samp_rate/1000)
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 2040.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_1
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(cw_samp_rate/1000)
    fbw: '0.4'
    interp: int(audio_samp_rate/1000)
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 3248.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_4_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: This block turns the SSB signal into a stream of RF samples.
    decim: '1'
    fbw: '0'
    interp: int(2*tx_samp_rate/audio_samp_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264.0, 2568]
    rotation: 270
    state: true
- name: rational_resampler_xxx_4_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: This block turns the FM signal into a stream of RF samples.
    decim: int(audio_samp_rate/1000)
    fbw: '0'
    interp: int(tx_samp_rate/4000)
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 2784.0]
    rotation: 0
    state: enabled
- name: root_raised_cosine_filter_0
  id: root_raised_cosine_filter
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.35'
    comment: ''
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: '200'
    samp_rate: cw_samp_rate
    sym_rate: symbol_rate
    type: fir_filter_fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 3068.0]
    rotation: 0
    state: true
- name: root_raised_cosine_filter_0_0
  id: root_raised_cosine_filter
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.35'
    comment: ''
    decim: '1'
    gain: cw_level
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    ntaps: '200'
    samp_rate: cw_samp_rate
    sym_rate: symbol_rate
    type: fir_filter_fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 3068.0]
    rotation: 0
    state: true
- name: rx_distancer
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Rx distancer.\
      \ This module aims at making sure that the hardware receive frequency is kept\
      \ within a defined range of hz below the desired frequency,\n    and that the\
      \ remaining difference is set into a variable. Only when the desired frequency\
      \ would result in the hardware receive frequency\n    would go outside the limits,\
      \ the frequencies will be changed.\n    The desired frequency is received through\
      \ the message port.\n    New hardware and filter frequencies are sent through\
      \ the hw_fq_out, and the filter:fq_out ports.\n    For proper operation, these\
      \ ports should be connected to Messsage_pair_to_var blocks that\n    transfer\
      \ the new values back to the hw_var and filter_var variables respectively. If\
      \ not, the operation of this block is undefined.\n\n         \"\"\"\n\n    def\
      \ __init__(self, desired_fq=0.0, min_distance=100e3, max_distance=1e6, hw_var=None,\
      \ filter_var=None):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Rx distancer',  # will show up in GRC\n\
      \            in_sig=None,\n            out_sig=None\n        )\n\n        self.message_port_register_in(pmt.intern('freq_in'))\n\
      \        self.set_msg_handler(pmt.intern('freq_in'), self.handle_msg)\n    \
      \    self.message_port_register_out(pmt.intern(\"hw_fq_out\"))\n        self.message_port_register_out(pmt.intern(\"\
      filter_fq_out\"))\n\n        # if an attribute with the same name as a parameter\
      \ is found,\n        # a callback is registered (properties work, too).\n\n\
      \        self.min_distance=min_distance\n        self.max_distance=max_distance\n\
      \        self._desired_fq=desired_fq\n        self.hw_var=hw_var\n        self.filter_var=filter_var\n\
      \        # gr.log.error(\"Desired fq %f initially\" % desired_fq)\n        if\
      \ desired_fq:\n            self.compute_and_send(desired_fq)  # Initialize desired\
      \ fq\n\n    def compute_and_send(self, new_val):\n        hw_var = self.hw_var\n\
      \        # gr.log.error(\"New value %f\" % new_val)\n\n        hw_chunk = (self.max_distance\
      \ - self.min_distance) / 2.0\n        # gr.log.error(\"Chunk size= %f\" % hw_chunk)\n\
      \n        distance = new_val - hw_var\n        # gr.log.error(\"Distance = %f\"\
      \ % distance)\n\n        while distance > self.max_distance:\n            #\
      \ gr.log.error(\"Distance = %f\" % distance)\n            hw_var += hw_chunk\n\
      \            # gr.log.error(\"HW var = %f\" % hw_var)\n            distance\
      \ = new_val - hw_var\n\n        while distance < self.min_distance:\n      \
      \      # gr.log.error(\"Distance = %f\" % distance)\n            hw_var -= hw_chunk\n\
      \            # gr.log.error(\"HW var = %f\" % hw_var)\n            distance\
      \ = new_val - hw_var\n\n        # gr.log.error(\"New HW var = %f\" % hw_var)\n\
      \n\n        if hw_var != self.hw_var:\n            gr.log.info(\"New HW fq =\
      \ %f\" % hw_var)\n            self.message_port_pub(pmt.intern(\"hw_fq_out\"\
      ), pmt.cons(pmt.intern(\"hw_fq\"), pmt.to_pmt(hw_var)))\n        new_filter\
      \ = new_val - hw_var\n\n        # gr.log.error(\"New filter var = %f\" % new_filter)\n\
      \n        if new_filter != self.filter_var:\n            gr.log.info(\"New filter\
      \ var = %f\" % new_filter)\n            self.message_port_pub(pmt.intern(\"\
      filter_fq_out\"), pmt.cons(pmt.intern(\"filter_fq\"), pmt.to_pmt(new_filter)))\n\
      \        pass\n\n    @property\n    def desired_fq(self):\n        \"\"\"The\
      \ gate control parameter tells whether messages are to be transferred or not\"\
      \"\"\n        return self._desired_fq\n\n    @desired_fq.setter\n    def desired_fq(self,\
      \ value):\n        self._desired_fq = value\n        self.compute_and_send(value)\n\
      \n    @desired_fq.deleter\n    def desired_fq(self):\n        del self._desired_fq\n\
      \n\n    def handle_msg(self, msg):\n        if not pmt.is_pair(msg) or pmt.is_dict(msg)\
      \ or pmt.is_pdu(msg):\n            gr.log.warn(\"Input message %s is not a simple\
      \ pair, dropping\" % repr(msg))\n            return\n        # gr.log.error(\"\
      Input message %s received\" % repr(msg))\n        # gr.log.error(\"Max distance\
      \ %d\" % self.max_distance)\n        # gr.log.error(\"Min distance %d\" % self.min_distance)\n\
      \n        new_val = pmt.to_python(pmt.cdr(msg))\n\n        self.compute_and_send(new_val)\n\
      \n\n\n    def stop(self):\n        return True"
    affinity: ''
    alias: ''
    comment: 'Selects hardware receiver frequency and demodulator offset given desired
      listening fq.

      Keeps demodulator offset within the passband of hardware receiver,'
    desired_fq: current_default_fq
    filter_var: filter_fq
    hw_var: rx_hw_fq
    max_distance: rx_samp_rate/2.0
    maxoutbuf: '0'
    min_distance: 100e3
    minoutbuf: '0'
  states:
    _io_cache: ('Rx distancer', 'blk', [('desired_fq', '0.0'), ('min_distance', '100000.0'),
      ('max_distance', '1000000.0'), ('hw_var', 'None'), ('filter_var', 'None')],
      [('freq_in', 'message', 1)], [('filter_fq_out', 'message', 1), ('hw_fq_out',
      'message', 1)], 'Rx distancer. This module aims at making sure that the hardware
      receive frequency is kept within a defined range of hz below the desired frequency,\n    and
      that the remaining difference is set into a variable. Only when the desired
      frequency would result in the hardware receive frequency\n    would go outside
      the limits, the frequencies will be changed.\n    The desired frequency is received
      through the message port.\n    New hardware and filter frequencies are sent
      through the hw_fq_out, and the filter:fq_out ports.\n    For proper operation,
      these ports should be connected to Messsage_pair_to_var blocks that\n    transfer
      the new values back to the hw_var and filter_var variables respectively. If
      not, the operation of this block is undefined.\n\n         ', ['desired_fq',
      'filter_var', 'hw_var', 'max_distance', 'min_distance'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 316.0]
    rotation: 0
    state: true
- name: settings_tab
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: ''
    label0: RX_settings
    label1: TX_settings
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: Debug
    label3: AGC
    label4: ''
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1480, 196.0]
    rotation: 0
    state: true
- name: soapy_hackrf_sink_0
  id: soapy_hackrf_sink
  parameters:
    affinity: ''
    alias: ''
    amp: 'True'
    bandwidth: tx_bw[tx_bw_opts]
    center_freq: tx_fq+tx_mode_offset[side_band_tx] + fq_calibration
    comment: ''
    dev_args: driver=remote,remote=tcp://192.168.1.125:1234,remote:type=hackrf
    samp_rate: tx_samp_rate
    type: fc32
    vga: tx_gain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1736, 3052.0]
    rotation: 0
    state: enabled
- name: soapy_hackrf_source_0
  id: soapy_hackrf_source
  parameters:
    affinity: ''
    alias: ''
    amp: rx_preamp
    bandwidth: '0'
    center_freq: rx_hw_fq + fq_calibration
    comment: ''
    dev_args: driver=remote,remote=tcp://192.168.1.125:1234,remote:type=hackrf
    gain: lna_gain
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: rx_samp_rate
    type: fc32
    vga: vga_gain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 1668.0]
    rotation: 0
    state: enabled
- name: tx_fq_sync
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\nimport time\n\nimport numpy\
      \ as np\nfrom gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Message gate. This module either transfer messages from the input port to\
      \ the output port, or not.\n        Parameters:\n            gate_control(R):\
      \ Boolean, true transfers messages, false swallows them\n            resync(R):\
      \ If true, the last swallowed message will be sent when the message gate opens\n\
      \            repeat(R): Defines how many copies of each message to send. (Used\
      \ to work around a bug in QT DigitalNumberControl)\"\"\"\n\n    def __init__(self,\
      \ gate_control=True, resync=True, repeat=1):  # only default arguments here\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='Message\
      \ Gate',  # will show up in GRC\n            in_sig=None,\n            out_sig=None\n\
      \        )\n\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('msg_out'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n        # if an attribute with the same name as a parameter\
      \ is found,\n        # a callback is registered (properties work, too).\n  \
      \      self.last_msg = None\n        self.resync = resync\n        self.repeat\
      \ = repeat\n\n\n        self._gate_control = gate_control\n\n    @property\n\
      \    def gate_control(self):\n        \"\"\"The gate control parameter tells\
      \ whether messages are to be transferred or not\"\"\"\n        return self._gate_control\n\
      \n    @gate_control.setter\n    def gate_control(self, value):\n        if self.resync\
      \ and value and value != self._gate_control and self.last_msg is not None:\n\
      \            for i in range(self.repeat):\n                self.message_port_pub(pmt.intern('msg_out'),\
      \ self.last_msg)\n                time.sleep(0.1)\n            self.last_msg\
      \ = None\n        self._gate_control = value\n\n    @gate_control.deleter\n\
      \    def gate_control(self):\n        del self._gate_control\n\n    def handle_msg(self,\
      \ msg):\n        if self.gate_control:\n            for i in range(self.repeat):\n\
      \                self.message_port_pub(pmt.intern('msg_out'), msg)\n       \
      \         time.sleep(0.1)\n        else:\n            self.last_msg = msg\n"
    affinity: ''
    alias: ''
    comment: "Transfers RX frequency changes to the \nTx freq iff the split_fq checkbox\
      \ is *not* checked"
    gate_control: split_fq
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: '2'
    resync: 'True'
  states:
    _io_cache: '(''Message Gate'', ''blk'', [(''gate_control'', ''True''), (''resync'',
      ''True''), (''repeat'', ''1'')], [(''msg_in'', ''message'', 1)], [(''msg_out'',
      ''message'', 1)], ''Message gate. This module either transfer messages from
      the input port to the output port, or not.\n        Parameters:\n            gate_control(R):
      Boolean, true transfers messages, false swallows them\n            resync(R):
      If true, the last swallowed message will be sent when the message gate opens\n            repeat(R):
      Defines how many copies of each message to send. (Used to work around a bug
      in QT DigitalNumberControl)'', [''gate_control'', ''repeat'', ''resync''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1760, 524.0]
    rotation: 0
    state: true
- name: variable_qtgui_msg_push_button_0_0
  id: variable_qtgui_msg_push_button
  parameters:
    comment: ''
    gui_hint: op_tab@2:1,1,1,1
    label: CALL CQ
    msgName: ''
    relBackgroundColor: white
    relFontColor: black
    type: string
    value: CQ%s CQ%s CQ%s DE SM6FBQ SM6FBQ SM6FBQ %sk
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 3328.0]
    rotation: 0
    state: true
- name: variable_qtgui_msg_push_button_0_0_0
  id: variable_qtgui_msg_push_button
  parameters:
    comment: ''
    gui_hint: op_tab@2:4,0,1,1
    label: Call DX
    msgName: ''
    relBackgroundColor: white
    relFontColor: black
    type: string
    value: '%s de SM6FBQ'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 3504.0]
    rotation: 0
    state: true
- name: variable_qtgui_msg_push_button_0_0_0_0
  id: variable_qtgui_msg_push_button
  parameters:
    comment: ''
    gui_hint: op_tab@2:5,0,1,1
    label: Send report
    msgName: ''
    relBackgroundColor: white
    relFontColor: black
    type: string
    value: '%s de SM6FBQ UR %s %s %s/ JO67BQ JO67BQ HW? %s de SM6FBQ k'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 3576.0]
    rotation: 0
    state: true
- name: variable_qtgui_msg_push_button_0_0_0_0_0
  id: variable_qtgui_msg_push_button
  parameters:
    comment: ''
    gui_hint: op_tab@2:6,0,1,1
    label: Send  R & report
    msgName: ''
    relBackgroundColor: white
    relFontColor: black
    type: string
    value: '%s de SM6FBQ R FB  %s %s %s/ JO67BQ JO67BQ HW? bk'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 3648.0]
    rotation: 0
    state: true
- name: variable_qtgui_msg_push_button_0_0_0_0_0_0
  id: variable_qtgui_msg_push_button
  parameters:
    comment: ''
    gui_hint: op_tab@2:7,0,1,1
    label: Send  RR 73
    msgName: ''
    relBackgroundColor: white
    relFontColor: black
    type: string
    value: '%s de SM6FBQ RR FB  73 Hej e e'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 3720.0]
    rotation: 0
    state: true
- name: virtual_sink_0_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: rrc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 2940.0]
    rotation: 0
    state: true
- name: virtual_source_0_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: rrc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 3092.0]
    rotation: 0
    state: true
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: clear_cw_msg
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1272, 3396.0]
    rotation: 0
    state: true
- name: zeromq_pull_msg_source_0
  id: zeromq_pull_msg_source
  parameters:
    address: tcp://127.0.0.1:8755
    affinity: ''
    alias: ''
    bind: 'False'
    comment: Receives frequency updates from WSJT-X
    maxoutbuf: '0'
    minoutbuf: '0'
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 520.0]
    rotation: 0
    state: enabled
- name: zeromq_push_msg_sink_0
  id: zeromq_push_msg_sink
  parameters:
    address: tcp://127.0.0.1:8754
    affinity: ''
    alias: ''
    bind: 'True'
    comment: Sends frequency changes to WSJT-X
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1728, 856.0]
    rotation: 0
    state: disabled

connections:
- [analog_agc2_xx_0, '0', blocks_multiply_const_vxx_1_0_0_0_0, '0']
- [analog_agc3_xx_0, '0', rational_resampler_xxx_0, '0']
- [analog_agc3_xx_0_0, '0', rational_resampler_xxx_0_0_0, '0']
- [analog_nbfm_rx_0, '0', blocks_multiply_const_vxx_1_0_1_0_1_0_0, '0']
- [analog_nbfm_tx_0, '0', blocks_selector_0_0, '0']
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '1']
- [analog_sig_source_x_0_0, '0', blocks_multiply_xx_0_0_0, '1']
- [analog_sig_source_x_1_0, '0', blocks_multiply_xx_0_0, '0']
- [analog_simple_squelch_cc_0, '0', analog_agc3_xx_0, '0']
- [analog_simple_squelch_cc_0_0, '0', analog_agc3_xx_0_0, '0']
- [analog_simple_squelch_cc_0_1, '0', analog_nbfm_rx_0, '0']
- [analog_simple_squelch_cc_0_1_0, '0', analog_wfm_rcv_pll_0, '0']
- [analog_wfm_rcv_pll_0, '0', blocks_multiply_const_vxx_1_0_1_0_1, '0']
- [analog_wfm_rcv_pll_0, '1', blocks_multiply_const_vxx_1_0_1_0_1_0, '0']
- [audio_source_0, '0', blocks_multiply_const_vxx_1_0_0_0, '0']
- [audio_source_0_0, '0', analog_agc2_xx_0, '0']
- [band_pass_filter_0, '0', blocks_multiply_const_vxx_1_0_0_1, '0']
- [band_pass_filter_0, '0', blocks_multiply_xx_0_0, '1']
- [band_pass_filter_0, '0', blocks_multiply_xx_0_0_0, '0']
- [band_pass_filter_0_0, '0', blocks_complex_to_float_0_1_0, '0']
- [band_pass_filter_0_1, '0', blocks_complex_to_float_0_2_0_0, '0']
- [band_pass_filter_0_2, '0', analog_nbfm_tx_0, '0']
- [blocks_add_xx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [blocks_complex_to_float_0_1_0, '0', blocks_float_to_complex_0_0_0, '1']
- [blocks_complex_to_float_0_1_0, '1', mulc_usb_0_0_0, '0']
- [blocks_complex_to_float_0_2, '0', blocks_float_to_complex_0_1, '1']
- [blocks_complex_to_float_0_2, '1', mulc_usb_0_0, '0']
- [blocks_complex_to_float_0_2_0, '0', blocks_float_to_complex_0_1_0, '1']
- [blocks_complex_to_float_0_2_0, '1', mulc_usb_0, '0']
- [blocks_complex_to_float_0_2_0_0, '0', blocks_float_to_complex_0_1_0_0, '1']
- [blocks_complex_to_float_0_2_0_0, '1', mulc_usb1, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_integrate_xx_0, '0']
- [blocks_complex_to_real_0, '0', blocks_multiply_matrix_xx_0, '1']
- [blocks_complex_to_real_0_0_0, '0', blocks_multiply_matrix_xx_0, '0']
- [blocks_float_to_char_0, '0', epy_block_1, '0']
- [blocks_float_to_complex_0_0_0, '0', analog_simple_squelch_cc_0, '0']
- [blocks_float_to_complex_0_0_0, '0', blocks_add_xx_0, '1']
- [blocks_float_to_complex_0_0_1, '0', blocks_selector_0, '0']
- [blocks_float_to_complex_0_1, '0', band_pass_filter_0_0, '0']
- [blocks_float_to_complex_0_1_0, '0', band_pass_filter_0_1, '0']
- [blocks_float_to_complex_0_1_0_0, '0', analog_simple_squelch_cc_0_0, '0']
- [blocks_float_to_complex_0_1_0_0, '0', blocks_add_xx_0, '0']
- [blocks_float_to_complex_0_3, '0', blocks_repeat_0_0, '0']
- [blocks_integrate_xx_0, '0', blocks_nlog10_ff_0, '0']
- [blocks_integrate_xx_1, '0', blocks_float_to_char_0, '0']
- [blocks_keep_one_in_n_0, '0', qtgui_sink_x_0, '0']
- [blocks_keep_one_in_n_0_0, '0', blocks_add_xx_0, '2']
- [blocks_keep_one_in_n_0_1, '0', blocks_add_xx_0, '3']
- [blocks_multiply_const_vxx_0, '0', rational_resampler_xxx_1, '0']
- [blocks_multiply_const_vxx_0_0, '0', blocks_float_to_complex_0_3, '0']
- [blocks_multiply_const_vxx_1_0, '0', audio_sink_0_1, '1']
- [blocks_multiply_const_vxx_1_0_0, '0', audio_sink_0_2, '1']
- [blocks_multiply_const_vxx_1_0_0_0, '0', blocks_selector_2, '1']
- [blocks_multiply_const_vxx_1_0_0_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_multiply_const_vxx_1_0_0_0_0, '0', band_pass_filter_0_2, '0']
- [blocks_multiply_const_vxx_1_0_0_0_0, '0', blocks_selector_2, '2']
- [blocks_multiply_const_vxx_1_0_0_1, '0', epy_block_1_0, '0']
- [blocks_multiply_const_vxx_1_0_1_0, '0', audio_sink_0_1, '0']
- [blocks_multiply_const_vxx_1_0_1_0_0, '0', audio_sink_0_2, '0']
- [blocks_multiply_const_vxx_1_0_1_0_1, '0', blocks_multiply_matrix_xx_0, '2']
- [blocks_multiply_const_vxx_1_0_1_0_1_0, '0', blocks_multiply_matrix_xx_0, '3']
- [blocks_multiply_const_vxx_1_0_1_0_1_0_0, '0', blocks_multiply_matrix_xx_0, '4']
- [blocks_multiply_const_vxx_4_0, '0', blocks_complex_to_float_0_2, '0']
- [blocks_multiply_const_vxx_4_0_0, '0', blocks_complex_to_float_0_2_0, '0']
- [blocks_multiply_const_vxx_4_0_1, '0', blocks_keep_one_in_n_0_0, '0']
- [blocks_multiply_const_vxx_4_0_1, '0', rational_resampler_xxx_0_0_0_0, '0']
- [blocks_multiply_const_vxx_4_0_1_0, '0', blocks_keep_one_in_n_0_1, '0']
- [blocks_multiply_const_vxx_4_0_1_0, '0', rational_resampler_xxx_0_0_0_0_0, '0']
- [blocks_multiply_matrix_xx_0, '0', blocks_multiply_const_vxx_1_0_1_0, '0']
- [blocks_multiply_matrix_xx_0, '0', blocks_multiply_const_vxx_1_0_1_0_0, '0']
- [blocks_multiply_matrix_xx_0, '1', blocks_multiply_const_vxx_1_0, '0']
- [blocks_multiply_matrix_xx_0, '1', blocks_multiply_const_vxx_1_0_0, '0']
- [blocks_multiply_xx_0, '0', blocks_multiply_const_vxx_0, '0']
- [blocks_multiply_xx_0_0, '0', filter_fft_low_pass_filter_0_0, '0']
- [blocks_multiply_xx_0_0_0, '0', filter_fft_low_pass_filter_0_0_0, '0']
- [blocks_nlog10_ff_0, '0', blocks_probe_signal_x_0, '0']
- [blocks_null_source_1, '0', blocks_selector_2, '0']
- [blocks_repeat_0, '0', blocks_uchar_to_float_0, '0']
- [blocks_repeat_0_0, '0', blocks_selector_1, '2']
- [blocks_selector_0, '0', blocks_null_sink_2, '0']
- [blocks_selector_0, '1', rational_resampler_xxx_4_0, '0']
- [blocks_selector_0_0, '0', blocks_null_sink_2_0, '0']
- [blocks_selector_0_0, '1', rational_resampler_xxx_4_0_0, '0']
- [blocks_selector_1, '0', blocks_null_sink_2_0_0, '0']
- [blocks_selector_1, '1', soapy_hackrf_sink_0, '0']
- [blocks_selector_2, '0', band_pass_filter_0, '0']
- [blocks_uchar_to_float_0, '0', virtual_sink_0_1, '0']
- [cw_msg_in, '0', epy_block_0_0, msg_in]
- [epy_block_0_0, '0', blocks_repeat_0, '0']
- [epy_block_0_0, clear_input, clear_cw_msg, '0']
- [epy_block_1, onair, blocks_message_debug_0, print]
- [epy_block_1, onair, blocks_msgpair_to_var_0, inpair]
- [epy_block_1_0, onair, blocks_message_debug_0, print]
- [epy_block_1_0, onair, blocks_msgpair_to_var_0_0, inpair]
- [epy_block_2, msg_out, blocks_message_debug_0, print]
- [epy_block_2, msg_out, rx_fq_win, valuein]
- [filter_fft_low_pass_filter_0, '0', blocks_selector_1, '0']
- [filter_fft_low_pass_filter_0_0, '0', blocks_float_to_complex_0_0_1, '0']
- [filter_fft_low_pass_filter_0_0_0, '0', blocks_float_to_complex_0_0_1, '1']
- [freq_xlating_fft_filter_ccc_1, '0', pfb_decimator_ccf_0_0, '0']
- [freq_xlating_fft_filter_ccc_1, '0', pfb_decimator_ccf_0_0_0_0, '0']
- [freq_xlating_fft_filter_ccc_1, '0', pfb_decimator_ccf_0_0_1, '0']
- [freq_xlating_fft_filter_ccc_1_0, '0', pfb_decimator_ccf_0_0_0, '0']
- [freq_xlating_fft_filter_ccc_1_0_0, '0', blocks_keep_one_in_n_0, '0']
- [msg_formatter, msg_out, cq_msg_in, '0']
- [msg_formatter_0, msg_out, cq_msg_in, '0']
- [msg_formatter_0_0, msg_out, cq_msg_in, '0']
- [msg_formatter_0_0_0, msg_out, cq_msg_in, '0']
- [msg_formatter_1, msg_out, cq_msg_in, '0']
- [mulc_usb1, '0', blocks_float_to_complex_0_1_0_0, '0']
- [mulc_usb_0, '0', blocks_float_to_complex_0_1_0, '0']
- [mulc_usb_0_0, '0', blocks_float_to_complex_0_1, '0']
- [mulc_usb_0_0_0, '0', blocks_float_to_complex_0_0_0, '0']
- [pfb_decimator_ccf_0_0, '0', blocks_multiply_const_vxx_4_0, '0']
- [pfb_decimator_ccf_0_0_0, '0', blocks_multiply_const_vxx_4_0_0, '0']
- [pfb_decimator_ccf_0_0_0_0, '0', blocks_multiply_const_vxx_4_0_1, '0']
- [pfb_decimator_ccf_0_0_1, '0', blocks_multiply_const_vxx_4_0_1_0, '0']
- [qtgui_edit_box_msg_0, msg, cq_msg_in, '0']
- [qtgui_sink_x_0, freq, blocks_message_debug_0, print]
- [qtgui_sink_x_0, freq, epy_block_2, msg_in]
- [rational_resampler_xxx_0, '0', blocks_complex_to_real_0, '0']
- [rational_resampler_xxx_0_0_0, '0', blocks_complex_to_real_0_0_0, '0']
- [rational_resampler_xxx_0_0_0_0, '0', analog_simple_squelch_cc_0_1_0, '0']
- [rational_resampler_xxx_0_0_0_0_0, '0', analog_simple_squelch_cc_0_1, '0']
- [rational_resampler_xxx_1, '0', audio_sink_0_0, '0']
- [rational_resampler_xxx_4_0, '0', filter_fft_low_pass_filter_0, '0']
- [rational_resampler_xxx_4_0_0, '0', blocks_selector_1, '1']
- [root_raised_cosine_filter_0, '0', root_raised_cosine_filter_0_0, '0']
- [root_raised_cosine_filter_0_0, '0', blocks_integrate_xx_1, '0']
- [root_raised_cosine_filter_0_0, '0', blocks_multiply_const_vxx_0_0, '0']
- [root_raised_cosine_filter_0_0, '0', blocks_multiply_xx_0, '0']
- [rx_distancer, filter_fq_out, blocks_msgpair_to_var_1_0_0, inpair]
- [rx_distancer, hw_fq_out, blocks_msgpair_to_var_1_0, inpair]
- [rx_fq_win, valueout, blocks_msgpair_to_var_1, inpair]
- [rx_fq_win, valueout, rx_distancer, freq_in]
- [rx_fq_win, valueout, tx_fq_sync, msg_in]
- [rx_fq_win, valueout, zeromq_push_msg_sink_0, in]
- [soapy_hackrf_source_0, '0', freq_xlating_fft_filter_ccc_1, '0']
- [soapy_hackrf_source_0, '0', freq_xlating_fft_filter_ccc_1_0, '0']
- [soapy_hackrf_source_0, '0', freq_xlating_fft_filter_ccc_1_0_0, '0']
- [tx_fq_sync, msg_out, tx_fq_win, valuein]
- [tx_fq_win, valueout, blocks_message_debug_0, print]
- [tx_fq_win, valueout, blocks_msgpair_to_var_1_1, inpair]
- [variable_qtgui_msg_push_button_0_0, pressed, msg_formatter_1, msg_in]
- [variable_qtgui_msg_push_button_0_0_0, pressed, msg_formatter, msg_in]
- [variable_qtgui_msg_push_button_0_0_0_0, pressed, msg_formatter_0, msg_in]
- [variable_qtgui_msg_push_button_0_0_0_0_0, pressed, msg_formatter_0_0, msg_in]
- [variable_qtgui_msg_push_button_0_0_0_0_0_0, pressed, msg_formatter_0_0_0, msg_in]
- [virtual_source_0_1, '0', root_raised_cosine_filter_0, '0']
- [virtual_source_1, '0', qtgui_edit_box_msg_0, val]
- [zeromq_pull_msg_source_0, out, rx_fq_win, valuein]

metadata:
  file_format: 1
  grc_version: 3.10.2.0
